{"version":3,"sources":["../src/cache.js"],"names":["debug","log","require","lock","load","directory","Error","lockfile","process","env","RECACHE","p","JSON","parse","_","val","key","value","undefined","plugin","pluginName","plugins","hasOwnProperty","sourcemap","taskName","sm","save","stringify"],"mappings":";;;;;;;AAMA;;AAOA;;;;;;AAbA;;;;;;AAeA,MAAM,EAAEA,KAAF,EAASC,GAAT,KAAiBC,QAAQ,aAAR,EAAuB,MAAvB,CAAvB;AACA,IAAIC,IAAJ;;AAEA;;;;;AAKO,MAAMC,sBAAO,MAAMC,SAAN,IAAmB;AACrC;AACA,MAAIF,IAAJ,EAAU,OAAOA,IAAP;;AAEV;AACA,MAAI,OAAOE,SAAP,KAAqB,QAArB,IAAiC,EAAC,MAAM,gBAAOA,SAAP,CAAP,CAArC,EAA+D;AAC7D,UAAM,IAAIC,KAAJ,CAAU,8BAA8BD,SAAxC,CAAN;AACD;;AAED;AACA,QAAME,WAAY,GAAEF,SAAU,YAA9B;;AAEA;AACA,MAAIG,QAAQC,GAAR,CAAYC,OAAZ,IAAuB,EAAC,MAAM,gBAAOH,QAAP,CAAP,CAA3B,EAAoD;AAClD,WAAQJ,OAAO,EAACQ,GAAE,EAAH,EAAf;AACD;;AAED;AACAX,QAAM,eAAN;AACA,MAAI;AACF,WAAQG,OAAOS,KAAKC,KAAL,EAAW,MAAM,kBAASN,QAAT,EAAmB,MAAnB,CAAjB,EAAf;AACD,GAFD,CAEE,OAAOO,CAAP,EAAU;AACVb,QAAI,4BAAJ;AACA,WAAQE,OAAO,EAACQ,GAAE,EAAH,EAAf;AACD;AACF,CAzBM;;AA2BP;;;;;;AAMO,MAAMI,oBAAM,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACjC,MAAIA,UAAUC,SAAd,EAAyB;AACvB,WAAOf,KAAKa,GAAL,CAAP;AACD;;AAEDb,OAAKa,GAAL,IAAYC,KAAZ;AACD,CANM;;AAQP;;;;AAIO,MAAME,0BAASC,cAAc;AAClC,QAAMC,UAAUN,IAAI,GAAJ,CAAhB;;AAEA,MAAI,CAACM,QAAQC,cAAR,CAAuBF,UAAvB,CAAL,EAAyC;AACvCC,YAAQD,UAAR,IAAsB,EAAtB;AACD;;AAED,SAAOC,QAAQD,UAAR,CAAP;AACD,CARM;;AAUP;;;;;;AAMO,MAAMG,gCAAY,CAACC,QAAD,EAAWC,EAAX,KAAkB;AACzC,MAAIF,YAAYR,IAAI,IAAJ,CAAhB;;AAEA,MAAI,CAACQ,SAAL,EAAgB;AACdR,QAAI,IAAJ,EAAUQ,YAAY,EAAtB;AACD;;AAED,MAAIE,EAAJ,EAAQ;AACNF,cAAUC,QAAV,IAAsBC,EAAtB;AACD,GAFD,MAEO;AACLF,cAAUC,QAAV,IAAsBD,UAAUC,QAAV,KAAuB,EAA7C;AACD;;AAED,SAAOD,SAAP;AACD,CAdM;;AAgBP;;;;AAIO,MAAMG,sBAAO,MAAMrB,SAAN,IAAmB;AACrCL,QAAM,cAAN;AACA,QAAM,mBAAUK,YAAY,YAAtB,EAAoCO,KAAKe,SAAL,CAAexB,IAAf,CAApC,CAAN;AACD,CAHM","file":"cache.js","sourcesContent":["/**\n * @file src/cache/load.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport {\n  stat,\n  mkdir,\n  exists,\n  readFile,\n  writeFile,\n} from './fs'\nimport path from 'path'\n\nconst { debug, log } = require('./utils/log')('hopp')\nlet lock\n\n/**\n * Loads a cache from the project.\n * @param {String} directory project directory\n * @return {Object} the loaded cache\n */\nexport const load = async directory => {\n  // send back internal cache if reloading\n  if (lock) return lock\n\n  // verify directory\n  if (typeof directory !== 'string' || !await exists(directory)) {\n    throw new Error('Invalid directory given: ' + directory)\n  }\n\n  // set cache file\n  const lockfile = `${directory}/hopp.lock`\n\n  // bring cache into existence\n  if (process.env.RECACHE || !await exists(lockfile)) {\n    return (lock = {p:{}})\n  }\n\n  // load lock file\n  debug('Loading cache')\n  try {\n    return (lock = JSON.parse(await readFile(lockfile, 'utf8')))\n  } catch (_) {\n    log('Corrupted cache; ejecting.')\n    return (lock = {p:{}})\n  }\n}\n\n/**\n * Adds/replaces a value in the cache.\n * @param {String} key\n * @param {Any} value anything stringifiable\n * @returns {Any?} value from cache\n */\nexport const val = (key, value) => {\n  if (value === undefined) {\n    return lock[key]\n  }\n  \n  lock[key] = value\n}\n\n/**\n * Load/create cache for a plugin.\n * @param {}\n */\nexport const plugin = pluginName => {\n  const plugins = val('p')\n\n  if (!plugins.hasOwnProperty(pluginName)) {\n    plugins[pluginName] = {}\n  }\n\n  return plugins[pluginName]\n}\n\n/**\n * Get/set a sourcemap.\n * @param {String} taskName name of the task\n * @param {Object} sm sourcemap to save for the task\n * @returns {Object} sourcemap from cache\n */\nexport const sourcemap = (taskName, sm) => {\n  let sourcemap = val('sm')\n\n  if (!sourcemap) {\n    val('sm', sourcemap = {})\n  }\n\n  if (sm) {\n    sourcemap[taskName] = sm\n  } else {\n    sourcemap[taskName] = sourcemap[taskName] || {}\n  }\n\n  return sourcemap\n}\n\n/**\n * Saves the lockfile again.\n * @param {*} directory \n */\nexport const save = async directory => {\n  debug('Saving cache')\n  await writeFile(directory + '/hopp.lock', JSON.stringify(lock))\n}\n"]}