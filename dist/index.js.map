{"version":3,"sources":["../src/index.js"],"names":["cache","Goal","hoppfile","debug","error","require","EventEmitter","defaultMaxListeners","projectDir","process","cwd","args","d","r","R","j","v","V","h","largestArg","argv","slice","alias","o","a","hasOwnProperty","length","env","RECACHE","recache","WEB_CONCURRENCY","jobs","help","console","log","repeat","exit","version","tasks","_","Array","forEach","mod","HOPP_DEBUG","verbose","HARMONY_FLAG","harmony","directory","resolve","find","file","load","hopp","_resolve","_resolveFilename","what","parent","id","filename","loaded","exports","fromCache","busted","taskDefns","fullList","call","addDependencies","task","concat","sub","defineTasks","create","save","catch","err","end","lastErr","stack","saveLog","then"],"mappings":";;AAMA;;;;AACA;;;;AACA;;IAAYA,K;;AACZ;;;;AACA;;;;AACA;;IAAYC,I;;AACZ;;IAAYC,Q;;AACZ;;;;;;;;AAbA;;;;;;AAeA,MAAM,EAAEC,KAAF,EAASC,KAAT,KAAmB,mBAAa,MAAb,CAAzB;;AAEA;;;;AAIAC,QAAQ,QAAR,EAAkBC,YAAlB,CAA+BC,mBAA/B,GAAqD,EAArD;;AAEA;;;;;AAKA,IAAIC,aAAaC,QAAQC,GAAR,EAAjB;;AAEA;;;AAGA,MAAMC,OAAO;AACXC,KAAG,CAAC,WAAD,EAAc,+BAAd,CADQ;AAEXC,KAAG,CAAC,SAAD,EAAY,wCAAZ,CAFQ;AAGXC,KAAG,CAAC,SAAD,EAAY,qBAAZ,CAHQ;AAIXC,KAAG,CAAC,MAAD,EAAS,8CAAT,CAJQ;AAKXC,KAAG,CAAC,SAAD,EAAY,uBAAZ,CALQ;AAMXC,KAAG,CAAC,SAAD,EAAY,kBAAZ,CANQ;AAOXC,KAAG,CAAC,MAAD,EAAS,sBAAT;;AAGL;AAVa,CAAb,CAWA,IAAIC,aAAa,EAAjB;AACA,MAAMC,OAAOf,QAAQ,UAAR,EAAoBI,QAAQW,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAApB,EAA2C;AACtDC,SAAO,CAAC,MAAM;AACZ,UAAMC,IAAI,EAAV;;AAEA,SAAK,IAAIC,CAAT,IAAcb,IAAd,EAAoB;AAClB,UAAIA,KAAKc,cAAL,CAAoBD,CAApB,CAAJ,EAA4B;AAC1BD,UAAEC,CAAF,IAAOb,KAAKa,CAAL,EAAQ,CAAR,CAAP;;AAEA,YAAIb,KAAKa,CAAL,EAAQ,CAAR,EAAWE,MAAX,GAAoBP,WAAWO,MAAnC,EAA2C;AACzCP,uBAAaR,KAAKa,CAAL,EAAQ,CAAR,CAAb;AACD;AACF;AACF;;AAED,WAAOD,CAAP;AACD,GAdM;AAD+C,CAA3C,CAAb;;AAkBA;AACAd,QAAQkB,GAAR,CAAYC,OAAZ,GAAsBR,KAAKS,OAA3B;AACApB,QAAQkB,GAAR,CAAYG,eAAZ,GAA8BV,KAAKW,IAAnC;;AAEA;;;AAGA,SAASC,IAAT,GAAiB;AACfC,UAAQC,GAAR,CAAY,+BAAZ;AACAD,UAAQC,GAAR,CAAY,EAAZ;;AAEA,OAAK,IAAIV,CAAT,IAAcb,IAAd,EAAoB;AAClB,QAAIA,KAAKc,cAAL,CAAoBD,CAApB,CAAJ,EAA4B;AAC1BS,cAAQC,GAAR,CAAY,iBAAZ,EAA+BV,CAA/B,EAAkCb,KAAKa,CAAL,EAAQ,CAAR,CAAlC,EAA8C,IAAIW,MAAJ,CAAWhB,WAAWO,MAAX,GAAoBf,KAAKa,CAAL,EAAQ,CAAR,EAAWE,MAA/B,GAAwC,CAAnD,CAA9C,EAAqGf,KAAKa,CAAL,EAAQ,CAAR,CAArG;AACD;AACF;;AAEDf,UAAQ2B,IAAR,CAAa,CAAb;AACD;;AAED,IAAIhB,KAAKiB,OAAT,EAAkB;AAChBJ,UAAQC,GAAR,CAAY7B,QAAQ,iBAAR,EAA2BgC,OAAvC;AACA5B,UAAQ2B,IAAR,CAAa,CAAb;AACD;;AAED;;;;;;;;AAQA,IAAIhB,KAAKY,IAAT,EAAe;AACbA;AACD;;AAED;;;AAGA,MAAMM,QAAQlB,KAAKmB,CAAL,CAAOb,MAAP,KAAkB,CAAlB,GAAsB,CAAC,SAAD,CAAtB,GAAoCN,KAAKmB,CAAvD;;AAEA;;;AAGA,IAAInB,KAAKf,OAAT,EAAkB;AAChB,GAAC,CAACe,KAAKf,OAAL,YAAwBmC,KAAxB,GAAgCpB,KAAKf,OAArC,GAA+C,CAACe,KAAKf,OAAN,CAAhD,EACEoC,OADF,CACUC,OAAOrC,QAAQqC,GAAR,CADjB;AAEF;;AAED,CAAC,CAAC,YAAY;AACZ;;;AAGAjC,UAAQkB,GAAR,CAAYgB,UAAZ,GAAyBlC,QAAQkB,GAAR,CAAYgB,UAAZ,IAA0B,CAAC,CAACvB,KAAKwB,OAA1D;AACAzC,QAAM,yBAAN,EAAiCM,QAAQkB,GAAR,CAAYgB,UAA7C;;AAEA;;;AAGAlC,UAAQkB,GAAR,CAAYkB,YAAZ,GAA2BpC,QAAQkB,GAAR,CAAYkB,YAAZ,IAA4B,CAAC,CAACzB,KAAK0B,OAA9D;;AAEA;;;;AAIAtC,eAAa,CAACuC,aAAa;AACzB;AACA,QAAIA,UAAU,CAAV,MAAiB,GAArB,EAA0B;AACxB,aAAOA,SAAP;AACD;;AAED;AACA,QAAIA,UAAU,CAAV,MAAiB,GAArB,EAA0B;AACxBA,kBAAY,OAAOA,SAAnB;AACD;;AAED;AACA,WAAO,eAAKC,OAAL,CAAavC,QAAQC,GAAR,EAAb,EAA4BqC,SAA5B,CAAP;AACD,GAbY,EAaV3B,KAAK2B,SAAL,KAAkB,MAAM7C,SAAS+C,IAAT,CAAcxC,QAAQC,GAAR,EAAd,CAAxB,CAbU,CAAb;;AAeA;;;;;;;;AAQA,QAAMwC,OAAO1C,aAAa,cAA1B;AACAL,QAAM,wBAAN,EAAgC+C,IAAhC;;AAEA;;;AAGA,QAAMlD,MAAMmD,IAAN,CAAW3C,UAAX,CAAN;;AAEA;;;AAGA,QAAM4C,OAAO,MAAM,oBAAW5C,UAAX,CAAnB;;AAEA;;;;AAIA,QAAM6C,WAAW,iBAAOC,gBAAxB;AACA,mBAAOA,gBAAP,GAA0B,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC1C,WAAOD,SAAS,MAAT,GAAkBA,IAAlB,GAAyBF,SAASE,IAAT,EAAeC,MAAf,CAAhC;AACD,GAFD;;AAIAnD,UAAQL,KAAR,CAAcoD,IAAd,GAAqB;AACnBK,QAAI,MADe;AAEnBC,cAAU,MAFS;AAGnBC,YAAQ,IAHW;AAInBC,aAASR;;AAGX;;;AAPqB,GAArB,CAUA,MAAM,CAACS,SAAD,EAAYC,MAAZ,EAAoBC,SAApB,IAAiC,MAAM7D,SAASiD,IAAT,CAAcD,IAAd,CAA7C;;AAEA;;;AAGA,MAAIW,SAAJ,EAAe;AACb;AACA;AACA,QAAIG,WAAW,GAAG3C,KAAH,CAAS4C,IAAT,CAAc3B,KAAd,CAAf;;AAEA;AACA,UAAM4B,kBAAkBC,QAAQ;AAC9B,UAAIJ,UAAUI,IAAV,aAA2B3B,KAA/B,EAAsC;AACpCwB,mBAAWA,SAASI,MAAT,CAAgBL,UAAUI,IAAV,EAAgB,CAAhB,CAAhB,CAAX;AACAJ,kBAAUI,IAAV,EAAgB1B,OAAhB,CAAwB4B,OAAOH,gBAAgBG,GAAhB,CAA/B;AACD;AACF,KALD;;AAOA;AACAL,aAASvB,OAAT,CAAiB0B,QAAQD,gBAAgBC,IAAhB,CAAzB;;AAEA;AACA,wBAASJ,SAAT,EAAoBC,QAApB;AACD;;AAED;;;AAGA/D,OAAKqE,WAAL,CAAiBP,SAAjB,EAA4BD,MAA5B;AACA,QAAM7D,KAAKsE,MAAL,CAAYjC,KAAZ,EAAmB9B,UAAnB,CAAN;;AAEA;;;AAGA,QAAMR,MAAMwE,IAAN,CAAWhE,UAAX,CAAN;AACD,CA1GA,IA0GIiE,KA1GJ,CA0GUC,OAAO;AAChB,WAASC,GAAT,CAAcC,OAAd,EAAuB;AACrBxE,UAAMwE,WAAWA,QAAQC,KAAnB,GAA2BD,QAAQC,KAAnC,GAA2CD,OAAjD;AACAnE,YAAQ2B,IAAR,CAAa,CAAC,CAAd;AACD;;AAED,gBAAa0C,OAAb,CAAqBtE,UAArB,EACGuE,IADH,CACQ,MAAMJ,IAAID,GAAJ,CADd,EAEGD,KAFH,CAESC,OAAOC,IAAID,GAAJ,CAFhB;AAGD,CAnHA","file":"index.js","sourcesContent":["/**\n * @file index.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport path from 'path'\nimport Module from 'module'\nimport * as cache from './cache'\nimport createHopp from './hopp'\nimport fromTree from './tasks/tree'\nimport * as Goal from './tasks/goal'\nimport * as hoppfile from './hoppfile'\nimport createLogger from './utils/log'\n\nconst { debug, error } = createLogger('hopp')\n\n/**\n * Extend the number of default listeners because 10\n * gets hit pretty quickly with piping streams.\n */\nrequire('events').EventEmitter.defaultMaxListeners = 50\n\n/**\n * This is resolved to the directory with a hoppfile later\n * on but it is globally scoped in this module so that we can\n * save debug logs to it.\n */\nlet projectDir = process.cwd()\n\n/**\n * Parse args\n */\nconst args = {\n  d: ['directory', 'set path to project directory'],\n  r: ['require', 'require a module before doing anything'],\n  R: ['recache', 'force cache busting'],\n  j: ['jobs', 'set number of jobs to use for parallel tasks'],\n  v: ['verbose', 'enable debug messages'],\n  V: ['version', 'get version info'],\n  h: ['help', 'display this message']\n}\n\n// parse via minimist\nlet largestArg = ''\nconst argv = require('minimist')(process.argv.slice(2), {\n  alias: (() => {\n    const o = {}\n\n    for (let a in args) {\n      if (args.hasOwnProperty(a)) {\n        o[a] = args[a][0]\n\n        if (args[a][0].length > largestArg.length) {\n          largestArg = args[a][0]\n        }\n      }\n    }\n\n    return o\n  })()\n})\n\n// expose argv to env\nprocess.env.RECACHE = argv.recache\nprocess.env.WEB_CONCURRENCY = argv.jobs\n\n/**\n * Print help.\n */\nfunction help () {\n  console.log('usage: hopp [OPTIONS] [TASKS]')\n  console.log('')\n\n  for (let a in args) {\n    if (args.hasOwnProperty(a)) {\n      console.log('  -%s, --%s%s%s', a, args[a][0], ' '.repeat(largestArg.length - args[a][0].length + 2), args[a][1])\n    }\n  }\n\n  process.exit(1)\n}\n\nif (argv.version) {\n  console.log(require('../package.json').version)\n  process.exit(0)\n}\n\n/**\n * Currently the only way for help to be called.\n * Later, it should also happen on invalid args but we\n * don't have invalid arguments yet.\n *\n * Invalid arguments is a flag misuse - never a missing\n * task. That error should be more minimal and separate.\n */\nif (argv.help) {\n  help()\n}\n\n/**\n * Set tasks.\n */\nconst tasks = argv._.length === 0 ? ['default'] : argv._\n\n/**\n * Require whatever needs to be loaded.\n */\nif (argv.require) {\n  ;(argv.require instanceof Array ? argv.require : [argv.require])\n    .forEach(mod => require(mod))\n}\n\n;(async () => {\n  /**\n   * Pass verbosity through to the env.\n   */\n  process.env.HOPP_DEBUG = process.env.HOPP_DEBUG || !!argv.verbose\n  debug('Setting HOPP_DEBUG = %j', process.env.HOPP_DEBUG)\n\n  /**\n   * Harmony flag for transpiling hoppfiles.\n   */\n  process.env.HARMONY_FLAG = process.env.HARMONY_FLAG || !!argv.harmony\n\n  /**\n   * If project directory not specified, do lookup for the\n   * hoppfile.js\n   */\n  projectDir = (directory => {\n    // absolute paths don't need correcting\n    if (directory[0] === '/') {\n      return directory\n    }\n\n    // sort-of relatives should be made into relative\n    if (directory[0] !== '.') {\n      directory = './' + directory\n    }\n\n    // map to current directory\n    return path.resolve(process.cwd(), directory)\n  })(argv.directory || await hoppfile.find(process.cwd()))\n\n  /**\n   * Set hoppfile location relative to the project.\n   *\n   * This will cause errors later if the directory was supplied\n   * manually but contains no hoppfile. We don't want to do a magic\n   * lookup for the user because they overrode the magic with the\n   * manual flag.\n   */\n  const file = projectDir + '/hoppfile.js'\n  debug('Using hoppfile.js @ %s', file)\n\n  /**\n   * Load cache.\n   */\n  await cache.load(projectDir)\n\n  /**\n   * Create hopp instance creator.\n   */\n  const hopp = await createHopp(projectDir)\n\n  /**\n   * Cache the hopp handler to make `require()` work\n   * in the hoppfile.\n   */\n  const _resolve = Module._resolveFilename\n  Module._resolveFilename = (what, parent) => {\n    return what === 'hopp' ? what : _resolve(what, parent)\n  }\n\n  require.cache.hopp = {\n    id: 'hopp',\n    filename: 'hopp',\n    loaded: true,\n    exports: hopp\n  }\n\n  /**\n   * Load tasks from file.\n   */\n  const [fromCache, busted, taskDefns] = await hoppfile.load(file)\n\n  /**\n   * Parse from cache.\n   */\n  if (fromCache) {\n    // create copy of tasks, we don't want to modify\n    // the actual goal list\n    let fullList = [].slice.call(tasks)\n\n    // walk the full tree\n    const addDependencies = task => {\n      if (taskDefns[task] instanceof Array) {\n        fullList = fullList.concat(taskDefns[task][1])\n        taskDefns[task].forEach(sub => addDependencies(sub))\n      }\n    }\n\n    // start walking from top\n    fullList.forEach(task => addDependencies(task))\n\n    // parse all tasks and their dependencies\n    fromTree(taskDefns, fullList)\n  }\n\n  /**\n   * Wait for task completion.\n   */\n  Goal.defineTasks(taskDefns, busted)\n  await Goal.create(tasks, projectDir)\n\n  /**\n   * Store cache for later.\n   */\n  await cache.save(projectDir)\n})().catch(err => {\n  function end (lastErr) {\n    error(lastErr && lastErr.stack ? lastErr.stack : lastErr)\n    process.exit(-1)\n  }\n\n  createLogger.saveLog(projectDir)\n    .then(() => end(err))\n    .catch(err => end(err))\n})\n"]}