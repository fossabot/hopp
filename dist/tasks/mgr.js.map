{"version":3,"sources":["../../src/tasks/mgr.js"],"names":["cache","debug","watchlog","log","plugins","pluginConfig","isUndefined","value","undefined","Hopp","constructor","src","Array","pluginCtx","d","stack","dest","out","rename","fn","Error","doRename","filename","ext","substr","lastIndexOf","prefix","suffix","watch","name","directory","recache","watchers","forEach","newpath","sub","split","indexOf","sep","resolve","push","recursive","start","Promise","process","on","watcher","close","startBundling","modified","useDoubleCache","sourcemap","files","freshBuild","unmodified","file","originalFd","tmpBundle","tmpBundlePath","bundle","Date","now","stream","createReadStream","fd","autoClose","replace","end","basename","concat","buildStack","add","dirname","reject","pipe","createWriteStream","map","error","that","mode","plugin","pluginStream","data","handler","then","newData","emit","catch","err","retval","next","done","loadPlugin","taskName","args","mod","require","join","config","__esModule","default","logger","pluginCache","needsBundling","needsRecaching","readonly","length","loadedPlugins","hasOwnProperty","body","output","tmp","tmppath","promise","newStream","all","val","toJSON","fromJSON","json"],"mappings":"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","file":"mgr.js","sourcesContent":["/**\n * @file src/tasks/mgr.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport pump from 'pump'\nimport glob from '../fs/glob'\nimport through from 'through'\nimport * as cache from '../cache'\nimport mapStream from 'map-stream'\nimport getPath from '../fs/get-path'\nimport { _, createLogger } from '../utils'\nimport { disableFSCache, mkdirp, openFile, tmpFile, tmpFileSync } from '../fs'\nimport { buffer, Bundle, createReadStream } from '../streams'\n\nconst { debug } = createLogger('hopp')\nconst watchlog = createLogger('hopp:watch').log\n\n/**\n * Plugins storage.\n */\nconst plugins = {}\nconst pluginConfig = {}\n\n/**\n * Test for undefined or null.\n */\nfunction isUndefined (value) {\n  return value === undefined || value === null\n}\n\n/**\n * Hopp class to manage tasks.\n */\nexport default class Hopp {\n  /**\n   * Creates a new task with the glob.\n   * DOES NOT START THE TASK.\n   *\n   * @param {Glob} src\n   * @return {Hopp} new hopp object\n   */\n  constructor (src) {\n    if (!(src instanceof Array)) {\n      src = [src]\n    }\n\n    // store context local to each task\n    this.pluginCtx = {}\n\n    // persistent info\n    this.d = {\n      src,\n      stack: []\n    }\n  }\n\n  /**\n   * Sets the destination of this pipeline.\n   * @param {String} out\n   * @return {Hopp} task manager\n   */\n  dest (out) {\n    this.d.dest = out\n    return this\n  }\n\n  /**\n   * Allow renaming of destination files.\n   * @param {Function} fn a renaming function\n   * @returns {Hopp} current object for chaining\n   */\n  rename (fn) {\n    if (typeof fn !== 'function' && typeof fn !== 'object') {\n      throw new Error('Rename must be given a function or object.')\n    }\n\n    this.d.rename = fn\n    return this\n  }\n\n  /**\n   * Actually do the renaming.\n   * @param {String} filename the original name\n   * @returns {String} renamed filename\n   */\n  doRename (filename) {\n    // if no rename is defined, just use current filename\n    if (!this.d.rename) return filename\n\n    // functions are easy, but they break caching\n    if (typeof this.d.rename === 'function') {\n      return this.d.rename(filename)\n    }\n\n    // remove extension\n    let ext = filename.substr(0, filename.lastIndexOf('.'))\n    filename = filename.substr(1 + filename.lastIndexOf('.'))\n\n    // add prefix\n    if (this.d.rename.prefix) {\n      filename = this.d.rename.prefix + filename\n    }\n\n    // add suffix, before extension\n    if (this.d.rename.suffix) {\n      filename += this.d.rename.suffix\n    }\n\n    // change extension\n    if (this.d.rename.ext) {\n      ext = this.d.rename.ext\n    }\n\n    // output final filename\n    return filename + ext\n  }\n\n  /**\n   * Run task in continuous mode.\n   */\n  watch (name, directory, recache = false) {\n    name = `watch:${name}`\n\n    const watchers = []\n\n    this.d.src.forEach(src => {\n      // get most definitive path possible\n      let newpath = ''\n      for (let sub of src.split('/')) {\n        if (sub) {\n          if (sub.indexOf('*') !== -1) {\n            break\n          }\n\n          newpath += path.sep + sub\n        }\n      }\n      newpath = path.resolve(directory, newpath.substr(1))\n\n      // disable fs caching for watch\n      disableFSCache()\n\n      // start watch\n      watchlog('Watching for %s ...', name)\n      watchers.push(fs.watch(newpath, {\n        recursive: src.indexOf('/**/') !== -1\n      }, () => this.start(name, directory, recache, false)))\n    })\n\n    return new Promise(resolve => {\n      process.on('SIGINT', () => {\n        watchers.forEach(watcher => watcher.close())\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Handles bundling.\n   */\n  async startBundling (name, directory, modified, dest, useDoubleCache = true) {\n    const { log, debug } = createLogger(`hopp:${name}`)\n    debug('Switched to bundling mode')\n\n    /**\n     * Fetch sourcemap from cache.\n     */\n    const sourcemap = cache.sourcemap(name)\n\n    /**\n     * Get full list of current files.\n     */\n    const files = await glob(this.d.src, directory, useDoubleCache, true)\n\n    /**\n     * Create list of unmodified.\n     */\n    let freshBuild = true\n    const unmodified = {}\n\n    for (let file of files) {\n      if (modified.indexOf(file) === -1) {\n        unmodified[file] = true\n        freshBuild = false\n      }\n    }\n\n    /**\n     * Get old bundle & create new one.\n     */\n    const originalFd = freshBuild ? null : await openFile(dest, 'r')\n    const [tmpBundle, tmpBundlePath] = await tmpFile()\n\n    /**\n     * Create new bundle to forward to.\n     */\n    const bundle = new Bundle(directory, tmpBundle)\n\n    /**\n     * Since bundling starts streaming right away, we can count this\n     * as the start of the build.\n     */\n    const start = Date.now()\n    log('Starting task')\n\n    /**\n     * Add all files.\n     */\n    for (let file of files) {\n      let stream\n\n      if (unmodified[file]) {\n        debug('forward: %s', file)\n        stream = fs.createReadStream(null, {\n          fd: originalFd,\n          autoClose: false,\n          start: sourcemap[file.replace(directory, '.')].start,\n          end: sourcemap[file.replace(directory, '.')].end\n        })\n      } else {\n        debug('transform: %s', file)\n        stream = pump([\n          createReadStream(file, dest + '/' + path.basename(file))\n        ].concat(this.buildStack(name)))\n      }\n\n      bundle.add(file, stream)\n    }\n\n    /**\n     * Wait for bundling to end.\n     */\n    await bundle.end(tmpBundlePath)\n\n    /**\n     * Move the bundle to the new location.\n     */\n    if (originalFd) originalFd.close()\n    await mkdirp(path.dirname(dest).replace(directory, ''), directory)\n    await new Promise((resolve, reject) => {\n      const stream = fs.createReadStream(tmpBundlePath).pipe(fs.createWriteStream(dest))\n\n      stream.on('close', resolve)\n      stream.on('error', reject)\n    })\n\n    /**\n     * Update sourcemap.\n     */\n    cache.sourcemap(name, bundle.map)\n\n    log('Task ended (took %s ms)', Date.now() - start)\n  }\n\n  /**\n   * Converts all plugins in the stack into streams.\n   */\n  buildStack (name) {\n    const { error } = createLogger(`hopp:${name}`)\n    const that = this\n\n    let mode = 'stream'\n\n    return this.d.stack.map(([plugin]) => {\n      const pluginStream = through(async function (data) {\n        try {\n          const handler = plugins[plugin](\n            that.pluginCtx[plugin],\n            data\n          )\n\n          // for async functions/promises\n          if (handler instanceof Promise) {\n            handler\n              .then(newData => this.emit('data', newData))\n              .catch(err => this.emit('error', err))\n          } else if ('next' in handler) {\n            let retval\n\n            // for async generators\n            do {\n              retval = await handler.next()\n              this.emit('data', retval.value)\n            } while (!retval.done)\n          } else {\n            // otherwise, fail\n            this.emit('error', new Error('Unknown return value received from ' + plugin))\n          }\n        } catch (err) {\n          this.emit('error', err)\n        }\n      })\n\n      /**\n       * Enable buffer mode if required.\n       */\n      if (mode === 'stream' && pluginConfig[plugin].mode === 'buffer') {\n        mode = 'buffer'\n        return pump(buffer(), pluginStream, err => {\n          if (err) error(err && err.stack ? err.stack : err)\n        })\n      }\n\n      /**\n       * Otherwise keep pumping.\n       */\n      return pluginStream\n    })\n  }\n\n  /**\n   * Loads a plugin, manages its env.\n   */\n  loadPlugin (taskName, plugin, args, directory) {\n    let mod = plugins[plugin]\n\n    if (!mod) {\n      // convert plugin path from relative back to absolute\n      try {\n        mod = require(path.join(directory, 'node_modules', plugin))\n      } catch (err) {\n        debug('failed to load plugin: %s', err && err.stack ? err.stack : err)\n        throw new Error('Failed to load plugin: ' + plugin)\n      }\n\n      // expose module config\n      pluginConfig[plugin] = mod.config || {}\n\n      // if defined as an ES2015 module, assume that the\n      // export is at 'default'\n      if (mod.__esModule === true) {\n        mod = mod.default\n      }\n\n      // add plugins to loaded plugins\n      plugins[plugin] = mod\n    }\n\n    // create plugin logger\n    const logger = createLogger(`hopp:${taskName}:${path.basename(plugin).substr(5)}`)\n\n    // load/create cache for plugin\n    const pluginCache = cache.plugin(plugin)\n\n    // create a new context for this plugin\n    this.pluginCtx[plugin] = {\n      args,\n      cache: pluginCache,\n      log: logger.log,\n      debug: logger.debug,\n      error: logger.error\n    }\n  }\n\n  /**\n   * Starts the pipeline.\n   * @return {Promise} resolves when task is complete\n   */\n  async start (name, directory, recache = false, useDoubleCache = true) {\n    const { log, debug } = createLogger(`hopp:${name}`)\n\n    /**\n     * Figure out if bundling is needed & load plugins.\n     */\n    if (isUndefined(this.needsBundling) || isUndefined(this.needsRecaching) || isUndefined(this.readonly) || (this.d.stack.length > 0 && !this.loadedPlugins)) {\n      this.loadedPlugins = true\n\n      this.d.stack.forEach(([plugin, args]) => {\n        if (!this.pluginCtx.hasOwnProperty(plugin)) {\n          this.loadPlugin(name, plugin, args, directory)\n        }\n\n        this.needsBundling = !!(this.needsBundling || pluginConfig[plugin].bundle)\n        this.needsRecaching = !!(this.needsRecaching || pluginConfig[plugin].recache)\n        this.readonly = !!(this.readonly || pluginConfig[plugin].readonly)\n\n        if (this.needsBundling && this.readonly) {\n          throw new Error('Task chain enabled bundling and readonly mode at the same time. Not sure what to do.')\n        }\n      })\n    }\n\n    /**\n     * Override recaching.\n     */\n    if (this.needsRecaching) {\n      recache = true\n    }\n\n    /**\n     * Get the modified files.\n     */\n    debug('task recache = %s', recache)\n    let files = await glob(this.d.src, directory, useDoubleCache, recache)\n\n    if (files.length > 0) {\n      const dest = this.d.dest ? path.resolve(directory, getPath(this.d.dest)) : ''\n\n      /**\n       * Switch to bundling mode if need be.\n       */\n      if (this.needsBundling) {\n        return this.startBundling(name, directory, files, dest, useDoubleCache)\n      }\n\n      /**\n       * Ensure dist directory exists.\n       */\n      if (!this.readonly || !this.d.dest) {\n        await mkdirp(dest.replace(directory, ''), directory)\n      }\n\n      /**\n       * Create streams.\n       */\n      files = _(files).map(file => ({\n        file,\n        stream: [\n          createReadStream(file, dest + '/' + path.basename(file))\n        ]\n      }))\n\n      if (this.d.stack.length > 0) {\n        /**\n         * Create streams.\n         */\n        const stack = this.buildStack(name)\n\n        /**\n         * Connect plugin streams with pipelines.\n         */\n        files.map(file => {\n          file.stream = file.stream.concat(stack)\n          return file\n        })\n      }\n\n      /**\n       * Connect with destination.\n       */\n      files.map(file => {\n        if (!this.readonly) {\n          // strip out the actual body and write it\n          file.stream.push(mapStream((data, next) => {\n            if (typeof data !== 'object' || !data.hasOwnProperty('body')) {\n              return next(new Error('A plugin has destroyed the stream by returning a non-object.'))\n            }\n\n            next(null, data.body)\n          }))\n\n          // add the writestream at the end\n          let output\n\n          if (!this.d.dest) {\n            const { fd: tmp, name: tmppath } = tmpFileSync()\n            output = fs.createWriteStream(null, {\n              fd: tmp\n            })\n\n            file.promise = new Promise((resolve, reject) => {\n              output.on('close', () => {\n                const newStream =\n                  fs.createReadStream(tmppath)\n                    .pipe(fs.createWriteStream(file.file))\n\n                newStream.on('error', reject)\n                newStream.on('close', resolve)\n              })\n            })\n          } else {\n            output = fs.createWriteStream(dest + '/' + this.doRename(path.basename(file.file)))\n          }\n\n          file.stream.push(output)\n        }\n\n        // promisify the current pipeline\n        return new Promise((resolve, reject) => {\n          // connect all streams together to form pipeline\n          file.stream = pump(file.stream, err => {\n            if (err) reject(err)\n          })\n\n          if (file.promise) {\n            file.promise.then(resolve, reject)\n          } else {\n            file.stream.on('close', resolve)\n          }\n        })\n      })\n\n      // start & wait for all pipelines to end\n      const start = Date.now()\n      log('Starting task')\n      await Promise.all(files.val())\n      log('Task ended (took %s ms)', Date.now() - start)\n    } else {\n      log('Skipping task')\n    }\n  }\n\n  /**\n   * Converts task manager to JSON for storage.\n   * @return {Object} proper JSON object\n   */\n  toJSON () {\n    return {\n      d: this.d,\n      needsBundling: this.needsBundling,\n      needsRecaching: this.needsRecaching,\n      readonly: this.readonly\n    }\n  }\n\n  /**\n   * Deserializes a JSON object into a manager.\n   * @param {Object} json\n   * @return {Hopp} task manager\n   */\n  fromJSON (json) {\n    this.d = json.d\n    this.needsBundling = json.needsBundling\n    this.needsRecaching = json.needsRecaching\n    this.readonly = json.readonly\n\n    return this\n  }\n}\n"]}