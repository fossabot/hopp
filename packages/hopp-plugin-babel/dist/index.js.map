{"version":3,"sources":["../lib/index.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;AAKA,QAAQ,6BAAR;;AAEA,IAAM,KAAK,QAAQ,IAAR,CAAX;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,QAAQ,QAAQ,YAAR,CAAd;;AAEA;;;AAGO,IAAM,0BAAS;AACpB,QAAM;;AAGR;;;AAJsB,CAAf;;uDAOQ,iBAAO,GAAP,EAAY,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACT,IAAI,IAAJ,CAAS,MAAT,GAAkB,CADT;AAAA;AAAA;AAAA;;AAAA,kBAEL,IAAI,KAAJ,CAAU,iCAAV,CAFK;;AAAA;;AAKb;;;AAGM,mBARO,GAQG,OAAO,MAAP,CAAc,EAAd,EAAkB,IAAI,IAAJ,CAAS,CAAT,KAAe,EAAjC,EAAqC;AACnD,wBAAU,KAAK,QAAL,CAAc,KAAK,IAAnB;AADyC,aAArC,CARH;;AAYb;;;;AAGM,kBAfO,GAeE,MAAM,SAAN,CAAgB,KAAK,IAArB,EAA2B,OAA3B,CAfF;;AAiBb;;;;AAjBa,iBAoBT,QAAQ,UApBC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAqBL,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACrC,iBAAG,SAAH,CAAa,KAAK,IAAL,GAAY,MAAzB,EAAiC,KAAK,SAAL,CAAe,OAAO,GAAtB,CAAjC,EAA6D,eAAO;AAClE,oBAAI,GAAJ,EAAS,OAAO,GAAP,EAAT,KACK;AACH,0BAAQ,GAAR,CAAY,WAAZ;AACA;AACD;AACF,eAND;AAOD,aARK,CArBK;;AAAA;;AAgCb;;;AAGA,iBAAK,IAAL,GAAa,GAAE,OAAO,IAAK,4BAA2B,KAAK,QAAL,CAAc,KAAK,IAAnB,CAAyB,MAA/E;;AAEA;;;AArCa,6CAwCN,IAxCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"index.js","sourcesContent":["/**\n * @file index.src.js\n * @license MIT\n */\n\nrequire('regenerator-runtime/runtime')\n\nconst fs = require('fs')\nconst path = require('path')\nconst babel = require('babel-core')\n\n/**\n * Buffering is needed for babel.\n */\nexport const config = {\n  mode: 'buffer'\n}\n\n/**\n * Proxy babel-core.\n */\nexport default async (ctx, data) => {\n  if (ctx.args.length > 1) {\n    throw new Error('Unexpected number of arguments.')\n  }\n\n  /**\n   * Add file metadata to babel options.\n   */\n  const options = Object.assign({}, ctx.args[0] || {}, {\n    filename: path.basename(data.file)\n  })\n\n  /**\n   * Transform via babel.\n   */\n  const output = babel.transform(data.body, options)\n\n  /**\n   * Write sourcemap.\n   */\n  if (options.sourceMaps) {\n    await new Promise((resolve, reject) => {\n      fs.writeFile(data.dest + '.map', JSON.stringify(output.map), err => {\n        if (err) reject(err)\n        else {\n          console.log('resolving')\n          resolve()\n        }\n      })\n    })\n  }\n\n  /**\n   * Replace code.\n   */\n  data.body = `${output.code}\\n\\n//# sourceMappingURL=${path.basename(data.dest)}.map`\n\n  /**\n   * Return final object.\n   */\n  return data\n}\n"]}