{"version":3,"sources":["index.js"],"names":["require","fs","path","babel","config","mode","ctx","data","args","length","Error","options","Object","assign","filename","basename","file","output","transform","body","sourceMaps","Promise","resolve","reject","writeFile","dest","JSON","stringify","map","err","code"],"mappings":";;;;;;;;AAAA;;;;;AAKAA,QAAQ,6BAAR;;AAEA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,QAAQH,QAAQ,YAAR,CAAd;;AAEA;;;AAGO,IAAMI,0BAAS;AACpBC,QAAM;;AAGR;;;AAJsB,CAAf;;uDAOQ,iBAAOC,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACTD,IAAIE,IAAJ,CAASC,MAAT,GAAkB,CADT;AAAA;AAAA;AAAA;;AAAA,kBAEL,IAAIC,KAAJ,CAAU,iCAAV,CAFK;;AAAA;;AAKb;;;AAGMC,mBARO,GAQGC,OAAOC,MAAP,CAAc,EAAd,EAAkBP,IAAIE,IAAJ,CAAS,CAAT,KAAe,EAAjC,EAAqC;AACnDM,wBAAUZ,KAAKa,QAAL,CAAcR,KAAKS,IAAnB;AADyC,aAArC,CARH;;AAYb;;;;AAGMC,kBAfO,GAeEd,MAAMe,SAAN,CAAgBX,KAAKY,IAArB,EAA2BR,OAA3B,CAfF;;AAiBb;;;;AAjBa,iBAoBTA,QAAQS,UApBC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAqBL,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrCtB,iBAAGuB,SAAH,CAAajB,KAAKkB,IAAL,GAAY,MAAzB,EAAiCC,KAAKC,SAAL,CAAeV,OAAOW,GAAtB,CAAjC,EAA6D,eAAO;AAClE,oBAAIC,GAAJ,EAASN,OAAOM,GAAP,EAAT,KACKP;AACN,eAHD;AAID,aALK,CArBK;;AAAA;;AA6Bb;;;AAGAf,iBAAKY,IAAL,GAAa,GAAEF,OAAOa,IAAK,4BAA2B5B,KAAKa,QAAL,CAAcR,KAAKkB,IAAnB,CAAyB,MAA/E;;AAEA;;;AAlCa,6CAqCNlB,IArCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"index.js","sourcesContent":["/**\n * @file index.src.js\n * @license MIT\n */\n\nrequire('regenerator-runtime/runtime')\n\nconst fs = require('fs')\nconst path = require('path')\nconst babel = require('babel-core')\n\n/**\n * Buffering is needed for babel.\n */\nexport const config = {\n  mode: 'buffer'\n}\n\n/**\n * Proxy babel-core.\n */\nexport default async (ctx, data) => {\n  if (ctx.args.length > 1) {\n    throw new Error('Unexpected number of arguments.')\n  }\n\n  /**\n   * Add file metadata to babel options.\n   */\n  const options = Object.assign({}, ctx.args[0] || {}, {\n    filename: path.basename(data.file)\n  })\n\n  /**\n   * Transform via babel.\n   */\n  const output = babel.transform(data.body, options)\n\n  /**\n   * Write sourcemap.\n   */\n  if (options.sourceMaps) {\n    await new Promise((resolve, reject) => {\n      fs.writeFile(data.dest + '.map', JSON.stringify(output.map), err => {\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }\n\n  /**\n   * Replace code.\n   */\n  data.body = `${output.code}\\n\\n//# sourceMappingURL=${path.basename(data.dest)}.map`\n\n  /**\n   * Return final object.\n   */\n  return data\n}\n"]}