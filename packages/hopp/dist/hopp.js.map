{"version":3,"sources":["../src/hopp.js"],"names":["debug","require","normalize","name","normalized","i","length","toUpperCase","directory","forEach","type","indexOf","plugName","prototype","hasOwnProperty","Error","d","stack","push","slice","call","arguments","preset","resolve","substack","apply","row","init","src","all","steps","watch"],"mappings":";;;;;;;;AAMA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAXA;;;;;;AAaA,MAAM,EAAEA,KAAF,KAAYC,QAAQ,aAAR,EAAuB,MAAvB,CAAlB;;AAEA;;;;AAIA,SAASC,SAAT,CAAoBC,IAApB,EAA2B;AACzB,MAAIC,aAAa,EAAjB;;AAEA,OAAK,IAAIC,IAAI,EAAb,EAAiBA,IAAIF,KAAKG,MAA1B,EAAkCD,KAAK,CAAvC,EAA0C;AACxCD,kBAAcD,KAAKE,CAAL,MAAY,GAAZ,GAAkBF,KAAKE,GAAL,EAAUE,WAAV,EAAlB,GAA4CJ,KAAKE,CAAL,CAA1D;AACD;;AAED,SAAOD,UAAP;AACD;;AAED;;;;;sCAGe,WAAMI,SAAN,EAAmB;AAChC,KAAC,CAAC,6BAAM,2BAAYA,SAAZ,CAAN,CAAD,EAA+BC,OAA/B,CAAuCN,QAAQ;AAC9C,YAAMO,OAAOP,KAAKQ,OAAL,CAAa,QAAb,MAA2B,CAAC,CAA5B,GAAgC,QAAhC,GAA2C,QAAxD;AACA,YAAMC,WAAWV,UAAUC,IAAV,CAAjB;;AAEAH,YAAM,oBAAN,EAA4BU,IAA5B,EAAkCP,IAAlC,EAAwCS,QAAxC;;AAEA;AACA,UAAI,cAAKC,SAAL,CAAeC,cAAf,CAA8BF,QAA9B,CAAJ,EAA6C;AAC3C,cAAM,IAAIG,KAAJ,CAAW,eAAcL,IAAK,KAAIP,IAAK,KAAIS,QAAS,kBAApD,CAAN;AACD;;AAED;AACA;AACA,oBAAKC,SAAL,CAAeD,QAAf,IAA2B,YAAY;AACrC;AACA;AACA;AACA;;AAEA,YAAIF,SAAS,QAAb,EAAuB;AACrB,eAAKM,CAAL,CAAOC,KAAP,CAAaC,IAAb,CAAkB,CAChBf,IADgB,EAEhB,GAAGgB,KAAH,CAASC,IAAT,CAAcC,SAAd,CAFgB,CAAlB;AAID,SALD,MAKO;AACL,gBAAMC,SAASrB,QAAQ,eAAKsB,OAAL,CAAaf,SAAb,EAAwB,cAAxB,EAAwCL,IAAxC,CAAR,CAAf;AACA,gBAAMqB,WAAWF,OAAOG,KAAP,CAAa,IAAb,EAAmBJ,SAAnB,CAAjB;;AAEAG,mBAASf,OAAT,CAAiBiB,OAAO;AACtB,kBAAM,CAACvB,IAAD,IAASuB,GAAf;;AAEA,gBAAIvB,KAAK,CAAL,MAAY,GAAhB,EAAqB;AACnB,mBAAKa,CAAL,CAAOC,KAAP,CAAaC,IAAb,CAAkBQ,GAAlB;AACD,aAFD,MAEO;AACL,mBAAKvB,IAAL,EAAWsB,KAAX,CAAiB,IAAjB,EAAuBC,IAAI,CAAJ,CAAvB;AACD;AACF,WARD;AASD;;AAED,eAAO,IAAP;AACD,OA3BD;AA4BD,KAzCA;;AA2CD;;;AAGA,UAAMC,OAAOC,OAAO,kBAASA,GAAT,CAApB;;AAEAD,SAAKE,GAAL;AACAF,SAAKG,KAAL;AACAH,SAAKI,KAAL;;AAEA,WAAOJ,IAAP;AACD,G","file":"../src/hopp.js","sourcesContent":["/**\n * @file src/hopp.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc..\n */\n\nimport path from 'path'\nimport Hopp from './tasks/mgr'\nimport createSteps from './tasks/steps'\nimport createWatch from './tasks/watch'\nimport loadPlugins from './tasks/loadPlugins'\nimport createParallel from './tasks/parallel'\n\nconst { debug } = require('./utils/log')('hopp')\n\n/**\n * Normalizes a plugin/preset name to be added to\n * the prototype.\n */\nfunction normalize( name ) {\n  let normalized = ''\n\n  for (let i = 12; i < name.length; i += 1) {\n    normalized += name[i] === '-' ? name[i++].toUpperCase() : name[i]\n  }\n  \n  return normalized\n}\n\n/**\n * Create hopp object based on plugins.\n */\nexport default async directory => {\n  ;(await loadPlugins(directory)).forEach(name => {\n    const type = name.indexOf('plugin') !== -1 ? 'plugin' : 'preset'\n    const plugName = normalize(name)\n\n    debug('adding %s %s as %s', type, name, plugName)\n\n    // check for conflicts\n    if (Hopp.prototype.hasOwnProperty(plugName)) {\n      throw new Error(`Conflicting ${type}: ${name} (${plugName} already exists)`)\n    }\n\n    // add the plugin to the hopp prototype so it can be\n    // used for the rest of the build process\n    Hopp.prototype[plugName] = function () {\n      // instead of actually loading the plugin at this stage,\n      // we will just pop its call into our internal call stack\n      // for use later. this is useful when we are stepping through\n      // an entire hoppfile but might only be running a single task\n\n      if (type === 'plugin') {\n        this.d.stack.push([\n          name,\n          [].slice.call(arguments)\n        ])\n      } else {\n        const preset = require(path.resolve(directory, 'node_modules', name))\n        const substack = preset.apply(null, arguments)\n\n        substack.forEach(row => {\n          const [name] = row\n\n          if (name[0] === '/') {\n            this.d.stack.push(row)\n          } else {\n            this[name].apply(this, row[1])\n          }\n        })\n      }\n\n      return this\n    }\n  })\n\n  /**\n   * Expose hopp class for task creation.\n   */\n  const init = src => new Hopp(src)\n\n  init.all = createParallel\n  init.steps = createSteps\n  init.watch = createWatch\n\n  return init\n}\n"]}