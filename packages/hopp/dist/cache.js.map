{"version":3,"sources":["../src/cache.js"],"names":["lock","gt","v","version","Error","compat","require","default","err","updateCache","debug","log","createCache","p","load","directory","lockfile","process","env","RECACHE","JSON","parse","_","val","key","value","undefined","plugin","pluginName","plugins","hasOwnProperty","sourcemap","taskName","sm","save","stringify"],"mappings":"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","file":"../src/cache.js","sourcesContent":["/**\n * @file src/cache/load.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport {\n  exists,\n  readFile,\n  writeFile\n} from './fs'\nimport semver from 'semver'\n\nconst { version } = require('../package.json')\nconst { debug, log } = require('./utils/log')('hopp')\nlet lock\n\n/**\n * Define what an empty cache looks like.\n */\nconst createCache = () => ((lock = {\n  v: version,\n  p: {}\n}))\n\n/**\n * Loads a cache from the project.\n * @param {String} directory project directory\n * @return {Object} the loaded cache\n */\nexport const load = async directory => {\n  // send back internal cache if reloading\n  if (lock) return lock\n\n  // verify directory\n  if (typeof directory !== 'string' || !await exists(directory)) {\n    throw new Error('Invalid directory given: ' + directory)\n  }\n\n  // set cache file\n  const lockfile = `${directory}/hopp.lock`\n\n  // bring cache into existence\n  if (process.env.RECACHE === 'true' || !await exists(lockfile)) {\n    return (lock = createCache())\n  }\n\n  // load lock file\n  debug('Loading cache')\n  try {\n    lock = JSON.parse(await readFile(lockfile, 'utf8'))\n    debug('loaded cache at v%s', lock.v)\n  } catch (_) {\n    log('Corrupted cache; ejecting.')\n    return (lock = createCache())\n  }\n\n  // handle version change\n  if (lock.v !== version) {\n    log('Found stale cache; updating.')\n    lock = await updateCache(lock)\n  }\n\n  return lock\n}\n\n/**\n * Adds/replaces a value in the cache.\n * @param {String} key\n * @param {Any} value anything stringifiable\n * @returns {Any?} value from cache\n */\nexport const val = (key, value) => {\n  if (value === undefined) {\n    return lock[key]\n  }\n\n  lock[key] = value\n}\n\n/**\n * Load/create cache for a plugin.\n * @param {}\n */\nexport const plugin = pluginName => {\n  const plugins = val('p')\n\n  if (!plugins.hasOwnProperty(pluginName)) {\n    plugins[pluginName] = {}\n  }\n\n  return plugins[pluginName]\n}\n\n/**\n * Get/set a sourcemap.\n * @param {String} taskName name of the task\n * @param {Object} sm sourcemap to save for the task\n * @returns {Object} sourcemap from cache\n */\nexport const sourcemap = (taskName, sm) => {\n  let sourcemap = val('sm')\n\n  if (!sourcemap) {\n    val('sm', sourcemap = {})\n  }\n\n  if (sm) {\n    sourcemap[taskName] = sm\n  } else {\n    sourcemap[taskName] = sourcemap[taskName] || {}\n  }\n\n  return sourcemap\n}\n\n/**\n * Saves the lockfile again.\n * @param {*} directory\n */\nexport const save = async directory => {\n  debug('Saving cache')\n  await writeFile(directory + '/hopp.lock', JSON.stringify(lock))\n}\n\n/**\n * Cache updater.\n */\nasync function updateCache (lock) {\n  // handle newer lock files\n  if (semver.gt(lock.v, version)) {\n    throw new Error('Sorry, this project was built with a newer version of hopp. Please upgrade hopp by running: npm i -g hopp')\n  }\n\n  let compat\n\n  // load converter\n  try {\n    compat = require('./compat/' + lock.v).default\n  } catch (err) {\n    compat = require('./compat/else').default\n  }\n\n  // do convert\n  return compat(lock)\n}\n"]}