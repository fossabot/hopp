{"version":3,"sources":["cache.js"],"names":["version","require","debug","log","lock","createCache","v","p","load","directory","Error","lockfile","process","env","RECACHE","JSON","parse","_","updateCache","val","key","value","undefined","plugin","pluginName","plugins","hasOwnProperty","sourcemap","taskName","sm","save","stringify","gt","compat","default","err"],"mappings":"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","file":"cache.js","sourcesContent":["/**\n * @file src/cache/load.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport {\n  exists,\n  readFile,\n  writeFile\n} from './fs'\nimport semver from 'semver'\n\nconst { version } = require('../package.json')\nconst { debug, log } = require('./utils/log')('hopp')\nlet lock\n\n/**\n * Define what an empty cache looks like.\n */\nconst createCache = () => ((lock = {\n  v: version,\n  p: {}\n}))\n\n/**\n * Loads a cache from the project.\n * @param {String} directory project directory\n * @return {Object} the loaded cache\n */\nexport const load = async directory => {\n  // send back internal cache if reloading\n  if (lock) return lock\n\n  // verify directory\n  if (typeof directory !== 'string' || !await exists(directory)) {\n    throw new Error('Invalid directory given: ' + directory)\n  }\n\n  // set cache file\n  const lockfile = `${directory}/hopp.lock`\n\n  // bring cache into existence\n  if (process.env.RECACHE === 'true' || !await exists(lockfile)) {\n    return (lock = createCache())\n  }\n\n  // load lock file\n  debug('Loading cache')\n  try {\n    lock = JSON.parse(await readFile(lockfile, 'utf8'))\n    debug('loaded cache at v%s', lock.v)\n  } catch (_) {\n    log('Corrupted cache; ejecting.')\n    return (lock = createCache())\n  }\n\n  // handle version change\n  if (lock.v !== version) {\n    log('Found stale cache; updating.')\n    lock = await updateCache(lock)\n  }\n\n  return lock\n}\n\n/**\n * Adds/replaces a value in the cache.\n * @param {String} key\n * @param {Any} value anything stringifiable\n * @returns {Any?} value from cache\n */\nexport const val = (key, value) => {\n  if (value === undefined) {\n    return lock[key]\n  }\n\n  lock[key] = value\n}\n\n/**\n * Load/create cache for a plugin.\n * @param {}\n */\nexport const plugin = pluginName => {\n  const plugins = val('p')\n\n  if (!plugins.hasOwnProperty(pluginName)) {\n    plugins[pluginName] = {}\n  }\n\n  return plugins[pluginName]\n}\n\n/**\n * Get/set a sourcemap.\n * @param {String} taskName name of the task\n * @param {Object} sm sourcemap to save for the task\n * @returns {Object} sourcemap from cache\n */\nexport const sourcemap = (taskName, sm) => {\n  let sourcemap = val('sm')\n\n  if (!sourcemap) {\n    val('sm', sourcemap = {})\n  }\n\n  if (sm) {\n    sourcemap[taskName] = sm\n  } else {\n    sourcemap[taskName] = sourcemap[taskName] || {}\n  }\n\n  return sourcemap\n}\n\n/**\n * Saves the lockfile again.\n * @param {*} directory\n */\nexport const save = async directory => {\n  debug('Saving cache')\n  await writeFile(directory + '/hopp.lock', JSON.stringify(lock))\n}\n\n/**\n * Cache updater.\n */\nasync function updateCache (lock) {\n  // handle newer lock files\n  if (semver.gt(lock.v, version)) {\n    throw new Error('Sorry, this project was built with a newer version of hopp. Please upgrade hopp by running: npm i -g hopp')\n  }\n\n  let compat\n\n  // load converter\n  try {\n    compat = require('./compat/' + lock.v).default\n  } catch (err) {\n    compat = require('./compat/else').default\n  }\n\n  // do convert\n  return compat(lock)\n}\n"]}