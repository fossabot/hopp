{"version":3,"sources":["../../src/tasks/mgr.js"],"names":["cache","debug","watchlog","log","plugins","pluginConfig","isUndefined","value","undefined","Hopp","constructor","src","Array","pluginCtx","d","stack","dest","out","rename","fn","Error","doRename","filename","dirname","source","ext","substr","lastIndexOf","prefix","suffix","watch","name","directory","recache","watchers","forEach","newpath","resolve","nonMagic","push","recursive","indexOf","start","Promise","process","on","watcher","close","startBundling","modified","useDoubleCache","sourcemap","files","freshBuild","unmodified","file","originalFd","tmpBundle","tmpBundlePath","bundle","Date","now","stream","createReadStream","fd","autoClose","replace","end","basename","concat","buildStack","add","reject","pipe","createWriteStream","map","error","that","mode","plugin","pluginStream","obj","data","_","done","handler","err","retval","next","loadPlugin","taskName","args","mod","require","join","config","__esModule","default","logger","pluginCache","needsBundling","needsRecaching","readonly","length","loadedPlugins","hasOwnProperty","outfile","body","output","tmp","tmppath","promise","newStream","then","all","val","toJSON","fromJSON","json"],"mappings":"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","file":"../../src/tasks/mgr.js","sourcesContent":["/**\n * @file src/tasks/mgr.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport pump from 'pump'\nimport glob from '../fs/glob'\nimport through2 from 'through2'\nimport * as cache from '../cache'\nimport getPath from '../fs/get-path'\nimport { _, createLogger } from '../utils'\nimport { disableFSCache, mkdirp, openFile, tmpFile, tmpFileSync } from '../fs'\nimport { buffer, Bundle, createReadStream, map as mapStream } from '../streams'\n\nconst { debug } = createLogger('hopp')\nconst watchlog = createLogger('hopp:watch').log\n\n/**\n * Plugins storage.\n */\nconst plugins = {}\nconst pluginConfig = {}\n\n/**\n * Test for undefined or null.\n */\nfunction isUndefined (value) {\n  return value === undefined || value === null\n}\n\n/**\n * Hopp class to manage tasks.\n */\nexport default class Hopp {\n  /**\n   * Creates a new task with the glob.\n   * DOES NOT START THE TASK.\n   *\n   * @param {Glob} src\n   * @return {Hopp} new hopp object\n   */\n  constructor (src) {\n    if (!(src instanceof Array)) {\n      src = [src]\n    }\n\n    // store context local to each task\n    this.pluginCtx = {}\n\n    // persistent info\n    this.d = {\n      src,\n      stack: []\n    }\n  }\n\n  /**\n   * Sets the destination of this pipeline.\n   * @param {String} out\n   * @return {Hopp} task manager\n   */\n  dest (out) {\n    this.d.dest = out\n    return this\n  }\n\n  /**\n   * Allow renaming of destination files.\n   * @param {Function} fn a renaming function\n   * @returns {Hopp} current object for chaining\n   */\n  rename (fn) {\n    if (typeof fn !== 'function' && typeof fn !== 'object') {\n      throw new Error('Rename must be given a function or object.')\n    }\n\n    this.d.rename = fn\n    return this\n  }\n\n  /**\n   * Actually do the renaming.\n   * @param {String} filename the original name\n   * @returns {String} renamed filename\n   */\n  doRename (filename, dirname, source) {\n    // if no rename is defined, just use current filename\n    if (!this.d.rename) return dirname + '/' + filename\n\n    // functions are easy, but they break caching\n    if (typeof this.d.rename === 'function') {\n      return this.d.rename(filename, dirname, source)\n    }\n\n    // remove extension\n    let ext = filename.substr(0, filename.lastIndexOf('.'))\n    filename = filename.substr(1 + filename.lastIndexOf('.'))\n\n    // add prefix\n    if (this.d.rename.prefix) {\n      filename = this.d.rename.prefix + filename\n    }\n\n    // add suffix, before extension\n    if (this.d.rename.suffix) {\n      filename += this.d.rename.suffix\n    }\n\n    // change extension\n    if (this.d.rename.ext) {\n      ext = this.d.rename.ext\n    }\n\n    // output final filename into same dest directory\n    return dirname + '/' + filename + ext\n  }\n\n  /**\n   * Run task in continuous mode.\n   */\n  watch (name, directory, recache = false) {\n    name = `watch:${name}`\n\n    const watchers = []\n\n    this.d.src.forEach(src => {\n      // get most definitive path possible\n      let newpath = path.resolve(directory, glob.nonMagic(src))\n\n      // disable fs caching for watch\n      disableFSCache()\n\n      // start watch\n      watchlog('Watching for %s ...', name)\n      watchers.push(fs.watch(newpath, {\n        recursive: src.indexOf('/**/') !== -1\n      }, () => this.start(name, directory, recache, false)))\n    })\n\n    return new Promise(resolve => {\n      process.on('SIGINT', () => {\n        watchers.forEach(watcher => watcher.close())\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Handles bundling.\n   */\n  async startBundling (name, directory, modified, dest, useDoubleCache = true) {\n    const { log, debug } = createLogger(`hopp:${name}`)\n    debug('Switched to bundling mode')\n\n    /**\n     * Fetch sourcemap from cache.\n     */\n    const sourcemap = cache.sourcemap(name)\n\n    /**\n     * Get full list of current files.\n     */\n    const files = await glob(name, this.d.src, directory, useDoubleCache, true)\n\n    /**\n     * Create list of unmodified.\n     */\n    let freshBuild = true\n    const unmodified = {}\n\n    for (let file of files) {\n      if (modified.indexOf(file) === -1) {\n        unmodified[file] = true\n        freshBuild = false\n      }\n    }\n\n    /**\n     * Get old bundle & create new one.\n     */\n    const originalFd = freshBuild ? null : await openFile(dest, 'r')\n    const [tmpBundle, tmpBundlePath] = await tmpFile()\n\n    /**\n     * Create new bundle to forward to.\n     */\n    const bundle = new Bundle(directory, tmpBundle)\n\n    /**\n     * Since bundling starts streaming right away, we can count this\n     * as the start of the build.\n     */\n    const start = Date.now()\n    log('Starting task')\n\n    /**\n     * Add all files.\n     */\n    for (let file of files) {\n      let stream\n\n      if (unmodified[file]) {\n        debug('forward: %s', file)\n        stream = fs.createReadStream(null, {\n          fd: originalFd,\n          autoClose: false,\n          start: sourcemap[file.replace(directory, '.')].start,\n          end: sourcemap[file.replace(directory, '.')].end\n        })\n      } else {\n        debug('transform: %s', file)\n        stream = pump([\n          createReadStream(file, dest + '/' + path.basename(file))\n        ].concat(this.buildStack(name)))\n      }\n\n      bundle.add(file, stream)\n    }\n\n    /**\n     * Wait for bundling to end.\n     */\n    await bundle.end(tmpBundlePath)\n\n    /**\n     * Move the bundle to the new location.\n     */\n    if (originalFd) originalFd.close()\n    await mkdirp(path.dirname(dest).replace(directory, ''), directory)\n    await new Promise((resolve, reject) => {\n      const stream = fs.createReadStream(tmpBundlePath).pipe(fs.createWriteStream(dest))\n\n      stream.on('close', resolve)\n      stream.on('error', reject)\n    })\n\n    /**\n     * Update sourcemap.\n     */\n    cache.sourcemap(name, bundle.map)\n\n    log('Task ended (took %s ms)', Date.now() - start)\n  }\n\n  /**\n   * Converts all plugins in the stack into streams.\n   */\n  buildStack (name) {\n    const { error } = createLogger(`hopp:${name}`)\n    const that = this\n\n    let mode = 'stream'\n\n    return this.d.stack.map(([plugin]) => {\n      const pluginStream = through2.obj(async function (data, _, done) {\n        try {\n          const handler = plugins[plugin](\n            that.pluginCtx[plugin],\n            data\n          )\n\n          // for async functions/promises\n          if (handler instanceof Promise) {\n            try {\n              this.push(await handler)\n              done()\n            } catch (err) {\n              done(err)\n            }\n          } else if ('next' in handler) {\n            let retval\n\n            // for async generators\n            do {\n              retval = await handler.next()\n              this.push(retval.value)\n            } while (!retval.done)\n\n            done()\n          } else {\n            // otherwise, fail\n            done(new Error('Unknown return value received from ' + plugin))\n          }\n        } catch (err) {\n          done(err)\n        }\n      })\n\n      /**\n       * Enable buffer mode if required.\n       */\n      if (mode === 'stream' && pluginConfig[plugin].mode === 'buffer') {\n        mode = 'buffer'\n        return pump(buffer(), pluginStream, err => {\n          if (err) error(err && err.stack ? err.stack : err)\n        })\n      }\n\n      /**\n       * Otherwise keep pumping.\n       */\n      return pluginStream\n    })\n  }\n\n  /**\n   * Loads a plugin, manages its env.\n   */\n  loadPlugin (taskName, plugin, args, directory) {\n    let mod = plugins[plugin]\n\n    if (!mod) {\n      // convert plugin path from relative back to absolute\n      try {\n        mod = require(path.join(directory, 'node_modules', plugin))\n      } catch (err) {\n        debug('failed to load plugin: %s', err && err.stack ? err.stack : err)\n        throw new Error('Failed to load plugin: ' + plugin)\n      }\n\n      // expose module config\n      pluginConfig[plugin] = mod.config || {}\n\n      // if defined as an ES2015 module, assume that the\n      // export is at 'default'\n      if (mod.__esModule === true) {\n        mod = mod.default\n      }\n\n      // add plugins to loaded plugins\n      plugins[plugin] = mod\n    }\n\n    // create plugin logger\n    const logger = createLogger(`hopp:${taskName}:${path.basename(plugin).substr(5)}`)\n\n    // load/create cache for plugin\n    const pluginCache = cache.plugin(plugin)\n\n    // create a new context for this plugin\n    this.pluginCtx[plugin] = {\n      args,\n      cache: pluginCache,\n      log: logger.log,\n      debug: logger.debug,\n      error: logger.error\n    }\n  }\n\n  /**\n   * Starts the pipeline.\n   * @return {Promise} resolves when task is complete\n   */\n  async start (name, directory, recache = false, useDoubleCache = true) {\n    const { log, debug } = createLogger(`hopp:${name}`)\n\n    /**\n     * Figure out if bundling is needed & load plugins.\n     */\n    if (isUndefined(this.needsBundling) || isUndefined(this.needsRecaching) || isUndefined(this.readonly) || (this.d.stack.length > 0 && !this.loadedPlugins)) {\n      this.loadedPlugins = true\n\n      this.d.stack.forEach(([plugin, args]) => {\n        if (!this.pluginCtx.hasOwnProperty(plugin)) {\n          this.loadPlugin(name, plugin, args, directory)\n        }\n\n        this.needsBundling = !!(this.needsBundling || pluginConfig[plugin].bundle)\n        this.needsRecaching = !!(this.needsRecaching || pluginConfig[plugin].recache)\n        this.readonly = !!(this.readonly || pluginConfig[plugin].readonly)\n\n        if (this.needsBundling && this.readonly) {\n          throw new Error('Task chain enabled bundling and readonly mode at the same time. Not sure what to do.')\n        }\n      })\n    }\n\n    /**\n     * Override recaching.\n     */\n    if (this.needsRecaching) {\n      recache = true\n    }\n\n    /**\n     * Get the modified files.\n     */\n    debug('task recache = %s', recache)\n    let files = await glob(name, this.d.src, directory, useDoubleCache, recache)\n\n    if (files.length > 0) {\n      const dest = this.d.dest ? path.resolve(directory, getPath(this.d.dest)) : ''\n\n      /**\n       * Switch to bundling mode if need be.\n       */\n      if (this.needsBundling) {\n        return this.startBundling(name, directory, files, dest, useDoubleCache)\n      }\n\n      /**\n       * Ensure dist directory exists.\n       */\n      if (!this.readonly || !this.d.dest) {\n        await mkdirp(dest.replace(directory, ''), directory)\n      }\n\n      /**\n       * Create streams.\n       */\n      files = _(files).map(file => {\n        const outfile = this.doRename(path.basename(file), dest, file)\n\n        return {\n          file,\n          outfile,\n          stream: [\n            createReadStream(file, outfile)\n          ]\n        }\n      })\n\n      /**\n       * Connect plugin streams with pipelines.\n       */\n      if (this.d.stack.length > 0) {\n        files.map(file => {\n          file.stream = file.stream.concat(this.buildStack(name))\n          return file\n        })\n      }\n\n      /**\n       * Connect with destination.\n       */\n      files.map(file => {\n        if (!this.readonly) {\n          // strip out the actual body and write it\n          file.stream.push(mapStream((data, next) => {\n            if (typeof data !== 'object' || !data.hasOwnProperty('body')) {\n              return next(new Error('A plugin has destroyed the stream by returning a non-object.'))\n            }\n\n            next(null, data.body)\n          }))\n\n          // add the writestream at the end\n          let output\n\n          if (!this.d.dest) {\n            const { fd: tmp, name: tmppath } = tmpFileSync()\n            output = fs.createWriteStream(null, {\n              fd: tmp\n            })\n\n            file.promise = new Promise((resolve, reject) => {\n              output.on('close', () => {\n                const newStream =\n                  fs.createReadStream(tmppath)\n                    .pipe(fs.createWriteStream(file.file))\n\n                newStream.on('error', reject)\n                newStream.on('close', resolve)\n              })\n            })\n          } else {\n            debug('Set output: %s', file.outfile)\n            output = fs.createWriteStream(file.outfile)\n          }\n\n          file.stream.push(output)\n        }\n\n        // promisify the current pipeline\n        return new Promise((resolve, reject) => {\n          // connect all streams together to form pipeline\n          file.stream = pump(file.stream, err => {\n            if (err) reject(err)\n          })\n\n          if (file.promise) {\n            file.promise.then(resolve, reject)\n          } else {\n            file.stream.on('close', resolve)\n          }\n        })\n      })\n\n      // start & wait for all pipelines to end\n      const start = Date.now()\n      log('Starting task')\n      await Promise.all(files.val())\n      log('Task ended (took %s ms)', Date.now() - start)\n    } else {\n      log('Skipping task')\n    }\n  }\n\n  /**\n   * Converts task manager to JSON for storage.\n   * @return {Object} proper JSON object\n   */\n  toJSON () {\n    return {\n      d: this.d,\n      needsBundling: this.needsBundling,\n      needsRecaching: this.needsRecaching,\n      readonly: this.readonly\n    }\n  }\n\n  /**\n   * Deserializes a JSON object into a manager.\n   * @param {Object} json\n   * @return {Hopp} task manager\n   */\n  fromJSON (json) {\n    this.d = json.d\n    this.needsBundling = json.needsBundling\n    this.needsRecaching = json.needsRecaching\n    this.readonly = json.readonly\n\n    return this\n  }\n}\n"]}