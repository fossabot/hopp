{"version":3,"sources":["../../src/fs/glob.js"],"names":["cache","debug","require","statCache","tempCache","glob","pattern","cwd","useDoubleCache","recache","Array","undefined","val","process","env","RECACHE","walk","relative","pttn","directory","recursive","length","curr","shift","localResults","file","filepath","sep","fstat","isFile","hasOwnProperty","mtime","push","concat","isDirectory","results","Error","nm","nonMagic","split","replace","substr","resolve","newpath","sub","indexOf"],"mappings":"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","file":"glob.js","sourcesContent":["/**\n * @file src/glob.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport path from 'path'\nimport match from 'minimatch'\nimport * as cache from '../cache'\nimport { readdir, stat } from './'\n\nconst { debug } = require('../utils/log')('hopp:glob')\n\nlet statCache\nconst tempCache = {}\n\nasync function glob (pattern, cwd, useDoubleCache = false, recache = false) {\n  // prefer arrays\n  if (!(pattern instanceof Array)) {\n    pattern = [pattern]\n  }\n\n  // get cache\n  if (statCache === undefined) {\n    statCache = cache.val('sc') || {}\n  }\n\n  // allow overrides from the env\n  recache = recache || process.env.RECACHE === 'true'\n\n  /**\n   * Recursive walk.\n   */\n  async function walk (relative, pttn, directory, recursive = false) {\n    if (pttn.length === 0) {\n      return []\n    }\n\n    const curr = pttn.shift()\n    let localResults = []\n\n    debug('cwd = %s, relative = %s, curr: %s, dir = %s, recur = %s, recache = %s', cwd, relative, curr, directory, recursive, recache)\n\n    for (let file of (await readdir(directory))) {\n      // fix file path\n      const filepath = directory + path.sep + file\n\n      // get stat from temp cache (for non-watch tasks) or stat()\n      let fstat\n\n      if (useDoubleCache) {\n        fstat = tempCache[filepath] = tempCache[filepath] || await stat(filepath)\n      } else {\n        fstat = await stat(filepath)\n      }\n\n      // has been modified\n      if (match(file, curr)) {\n        if (fstat.isFile()) {\n          if (recache || !statCache.hasOwnProperty(relative) || statCache[relative] !== +fstat.mtime) {\n            statCache[relative] = +fstat.mtime\n            localResults.push(filepath)\n          }\n        } else {\n          localResults = localResults.concat(await walk(relative + path.sep + file, pttn, filepath, recursive || curr === '**'))\n        }\n      } else if (fstat.isDirectory() && recursive) {\n        localResults = localResults.concat(await walk(relative + path.sep + file, [curr].concat(pttn), filepath, recursive))\n      }\n    }\n\n    return localResults\n  }\n\n  /**\n   * Run all patterns against directory.\n   */\n  let results = []\n  for (let pttn of pattern) {\n    if (pttn[0] === '/') {\n      throw new Error('Not sure what to do with the / in your glob.')\n    }\n\n    const nm = glob.nonMagic(pttn)\n\n    if (nm === '.') {\n      results = results.concat(await walk(\n        '.',\n        pttn.split('/'),\n        cwd\n      ))\n    } else {\n      results = results.concat(await walk(\n        nm,\n        pttn.replace(nm, '').substr(1).split('/'),\n        path.resolve(cwd, nm)\n      ))\n    }\n  }\n\n  /**\n   * Update cache.\n   */\n  cache.val('sc', statCache)\n\n  /**\n   * Return final results object.\n   */\n  return results\n}\n\n/**\n * Get non-magical start of glob.\n * @param {String} pattern glob pattern\n * @returns {String} definitive path\n */\nglob.nonMagic = function (pattern) {\n  let newpath = ''\n\n  for (let sub of pattern.split('/')) {\n    if (sub) {\n      if (sub.indexOf('*') !== -1) {\n        break\n      }\n\n      newpath += path.sep + sub\n    }\n  }\n\n  return newpath.substr(1)\n}\n\nexport default glob\n"]}