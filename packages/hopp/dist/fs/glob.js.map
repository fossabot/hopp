{"version":3,"sources":["glob.js"],"names":["cache","debug","require","statCache","tempCache","glob","pattern","cwd","useDoubleCache","recache","Array","undefined","val","process","env","RECACHE","walk","relative","pttn","directory","recursive","length","slice","curr","shift","localResults","file","filepath","sep","relativepath","fstat","isFile","mtime","hasOwnProperty","push","concat","isDirectory","results","Error","nm","nonMagic","split","replace","substr","resolve","newpath","sub","indexOf"],"mappings":"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","file":"glob.js","sourcesContent":["/**\n * @file src/glob.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport path from 'path'\nimport match from 'minimatch'\nimport * as cache from '../cache'\nimport { readdir, stat } from './'\n\nconst { debug } = require('../utils/log')('hopp:glob')\n\nlet statCache\nconst tempCache = {}\n\nasync function glob (pattern, cwd, useDoubleCache = false, recache = false) {\n  // prefer arrays\n  if (!(pattern instanceof Array)) {\n    pattern = [pattern]\n  }\n\n  // get cache\n  if (statCache === undefined) {\n    statCache = cache.val('sc') || {}\n  }\n\n  // allow overrides from the env\n  recache = recache || process.env.RECACHE === 'true'\n\n  /**\n   * Recursive walk.\n   */\n  async function walk (relative, pttn, directory, recursive = false) {\n    debug('walk(relative = %s, pttn = %s, directory = %s, recursive = %s) in %s [recache:%s, curr:%s]', relative, pttn, directory, recursive, cwd, recache, pttn[0])\n\n    if (pttn.length === 0) {\n      return []\n    }\n\n    pttn = pttn.slice()\n\n    const curr = pttn.shift()\n    let localResults = []\n\n    for (let file of (await readdir(directory))) {\n      // fix file path\n      const filepath = directory + path.sep + file\n      const relativepath = relative + path.sep + file\n\n      // get stat from temp cache (for non-watch tasks) or stat()\n      let fstat\n\n      if (useDoubleCache) {\n        fstat = tempCache[filepath] = tempCache[filepath] || await stat(filepath)\n      } else {\n        fstat = await stat(filepath)\n      }\n\n      debug('match(%s,%s) => %s [%s]', filepath, curr, match(file, curr), fstat.isFile() ? 'file' : 'dir')\n\n      // has been modified\n      debug('stat(%s) :: %s', +fstat.mtime, statCache[relativepath])\n\n      if (match(file, curr)) {\n        if (fstat.isFile()) {\n          if (recache || !statCache.hasOwnProperty(relativepath) || statCache[relativepath] !== +fstat.mtime) {\n            statCache[relativepath] = +fstat.mtime\n            localResults.push(filepath)\n\n            debug('add: %s', filepath)\n          }\n        } else {\n          localResults = localResults.concat(await walk(relativepath, pttn, filepath, recursive || curr === '**'))\n        }\n      } else if (fstat.isDirectory() && recursive) {\n        localResults = localResults.concat(await walk(relativepath, [curr].concat(pttn), filepath, recursive))\n      }\n    }\n\n    return localResults\n  }\n\n  /**\n   * Run all patterns against directory.\n   */\n  let results = []\n  for (let pttn of pattern) {\n    if (pttn[0] === '/') {\n      throw new Error('Not sure what to do with the / in your glob.')\n    }\n\n    const nm = glob.nonMagic(pttn)\n    debug('nm = %j', nm)\n\n    if (!nm) {\n      results = results.concat(await walk(\n        '.',\n        pttn.split('/'),\n        cwd\n      ))\n    } else {\n      results = results.concat(await walk(\n        nm,\n        pttn.replace(nm, '').substr(1).split('/'),\n        path.resolve(cwd, nm)\n      ))\n    }\n  }\n\n  /**\n   * Update cache.\n   */\n  cache.val('sc', statCache)\n\n  /**\n   * Return final results object.\n   */\n  return results\n}\n\n/**\n * Get non-magical start of glob.\n * @param {String} pattern glob pattern\n * @returns {String} definitive path\n */\nglob.nonMagic = function (pattern) {\n  let newpath = ''\n\n  for (let sub of pattern.split('/')) {\n    if (sub) {\n      if (sub.indexOf('*') !== -1) {\n        break\n      }\n\n      newpath += path.sep + sub\n    }\n  }\n\n  return newpath.substr(1)\n}\n\nexport default glob\n"]}