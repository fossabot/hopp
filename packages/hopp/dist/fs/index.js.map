{"version":3,"sources":["../../src/fs/index.js"],"names":["debug","require","useCache","promisify","fn","name","fnCall","args","slice","call","arguments","resolve","reject","apply","concat","err","cacheCall","disableFSCache","exists","dir","stat","String","indexOf","mkdir","openFile","open","readdir","readFile","writeFile","tmpFile","file","fdpath","fd","tmpFileSync","fileSync","mkdirp","directory","cwd","split","sep","mkdirpSync","mkdirSync"],"mappings":"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","file":"../../src/fs/index.js","sourcesContent":["/**\n * @file src/fs.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport fs from 'fs'\nimport tmp from 'tmp'\nimport path from 'path'\nimport { fn as wrap } from '../utils'\n\nconst { debug } = require('../utils/log')('hopp:fs')\n\nlet useCache = true\n\n/**\n * Similar to bluebird's Promise.promisify.\n * @param {Function} fn the async-callback function to transform\n * @return {Function} a new promise-based function\n */\nfunction promisify (fn, name) {\n  /**\n   * Create function call wrapper.\n   */\n  const fnCall = function () {\n    const args = [].slice.call(arguments)\n    debug('%s(%j)', name, args)\n    return new Promise((resolve, reject) => {\n      fn.apply(this, args.concat([function (err) {\n        if (err) reject(err)\n        else resolve.apply(null, [].slice.call(arguments, 1))\n      }]))\n    })\n  }\n\n  /**\n   * Create deterministic wrapper.\n   */\n  const cacheCall = wrap(fnCall)\n\n  /**\n   * Return conditional cache.\n   */\n  return function () {\n    if (useCache) return cacheCall.apply(this, arguments)\n    return fnCall.apply(this, arguments)\n  }\n}\n\n/**\n * Allow disabling of cache.\n */\nexport const disableFSCache = () => {\n  debug('Disabling fs cache')\n  useCache = false\n}\n\n/**\n * Transform only needed methods (instead of using mz\n * or doing a promisifyAll).\n */\nexport const exists = async dir => {\n  try {\n    await stat(dir)\n    return true\n  } catch (err) {\n    if (String(err).indexOf('ENOENT') === -1) {\n      throw err\n    }\n\n    return false\n  }\n}\nexport const stat = promisify(fs.stat, 'stat')\nexport const mkdir = promisify(fs.mkdir, 'mkdir')\nexport const openFile = promisify(fs.open, 'open')\nexport const readdir = promisify(fs.readdir, 'readdir')\nexport const readFile = promisify(fs.readFile, 'readFile')\nexport const writeFile = promisify(fs.writeFile, 'writeFile')\n\n/**\n * Create temporary file.\n */\nexport const tmpFile = () => new Promise((resolve, reject) => {\n  tmp.file((err, fdpath, fd) => {\n    if (err) reject(err)\n    else resolve([fd, fdpath])\n  })\n})\n\n/**\n * Create temporary file (sync).\n */\nexport const tmpFileSync = () => tmp.fileSync()\n\n/**\n * mkdir -p\n */\nexport const mkdirp = wrap(async (directory, cwd) => {\n  // explode into separate\n  directory = directory.split(path.sep)\n\n  // walk\n  for (let dir of directory) {\n    if (dir) {\n      try {\n        await mkdir(cwd + path.sep + dir)\n      } catch (err) {\n        if (String(err).indexOf('EEXIST') === -1) {\n          throw err\n        }\n      }\n    }\n\n    cwd += path.sep + dir\n  }\n})\n\n/**\n * mkdir -p (sync)\n */\nexport const mkdirpSync = (directory, cwd) => {\n  // explode into separate\n  directory = directory.split(path.sep)\n\n  // walk\n  for (let dir of directory) {\n    if (dir) {\n      try {\n        debug('mkdirp(%s)', cwd + path.sep + dir)\n        fs.mkdirSync(cwd + path.sep + dir)\n      } catch (err) {\n        if (String(err).indexOf('EEXIST') === -1) {\n          throw err\n        }\n      }\n    }\n\n    cwd += path.sep + dir\n  }\n}\n"]}