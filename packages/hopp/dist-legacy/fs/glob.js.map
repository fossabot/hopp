{"version":3,"sources":["../../src/fs/glob.js"],"names":["pattern","cwd","useDoubleCache","relative","pttn","directory","recursive","length","curr","shift","localResults","debug","recache","file","filepath","sep","relativepath","fstat","tempCache","isFile","statCache","hasOwnProperty","mtime","push","walk","concat","isDirectory","Array","undefined","cache","val","console","log","process","env","RECACHE","results","Error","nm","glob","nonMagic","split","replace","substr","resolve","require","newpath","sub","indexOf"],"mappings":"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","file":"glob.js","sourcesContent":["/**\n * @file src/glob.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport path from 'path'\nimport match from 'minimatch'\nimport * as cache from '../cache'\nimport { readdir, stat } from './'\n\nconst { debug } = require('../utils/log')('hopp:glob')\n\nlet statCache\nconst tempCache = {}\n\nasync function glob (pattern, cwd, useDoubleCache = false, recache = false) {\n  // prefer arrays\n  if (!(pattern instanceof Array)) {\n    pattern = [pattern]\n  }\n\n  // get cache\n  if (statCache === undefined) {\n    statCache = cache.val('sc') || {}\n  }\n\n  console.log('cache at start: %j', statCache)\n\n  // allow overrides from the env\n  recache = recache || process.env.RECACHE === 'true'\n\n  /**\n   * Recursive walk.\n   */\n  async function walk (relative, pttn, directory, recursive = false) {\n    if (pttn.length === 0) {\n      return []\n    }\n\n    const curr = pttn.shift()\n    let localResults = []\n\n    debug('cwd = %s, relative = %s, curr: %s, dir = %s, recur = %s, recache = %s', cwd, relative, curr, directory, recursive, recache)\n\n    for (let file of (await readdir(directory))) {\n      // fix file path\n      const filepath = directory + path.sep + file\n      const relativepath = relative + path.sep + file\n\n      // get stat from temp cache (for non-watch tasks) or stat()\n      let fstat\n\n      if (useDoubleCache) {\n        fstat = tempCache[filepath] = tempCache[filepath] || await stat(filepath)\n      } else {\n        fstat = await stat(filepath)\n      }\n\n      debug('match(%s,%s) => %s', filepath, curr, match(file, curr))\n\n      // has been modified\n      if (match(file, curr)) {\n        if (fstat.isFile()) {\n          if (recache || !statCache.hasOwnProperty(relativepath) || statCache[relativepath] !== +fstat.mtime) {\n            statCache[relativepath] = +fstat.mtime\n            localResults.push(filepath)\n\n            debug('add: %s', filepath)\n          }\n        } else {\n          localResults = localResults.concat(await walk(relative + path.sep + file, pttn, filepath, recursive || curr === '**'))\n        }\n      } else if (fstat.isDirectory() && recursive) {\n        localResults = localResults.concat(await walk(relative + path.sep + file, [curr].concat(pttn), filepath, recursive))\n      }\n    }\n\n    return localResults\n  }\n\n  /**\n   * Run all patterns against directory.\n   */\n  let results = []\n  for (let pttn of pattern) {\n    if (pttn[0] === '/') {\n      throw new Error('Not sure what to do with the / in your glob.')\n    }\n\n    const nm = glob.nonMagic(pttn)\n    debug('nm = %j', nm)\n\n    if (!nm) {\n      results = results.concat(await walk(\n        '.',\n        pttn.split('/'),\n        cwd\n      ))\n    } else {\n      results = results.concat(await walk(\n        nm,\n        pttn.replace(nm, '').substr(1).split('/'),\n        path.resolve(cwd, nm)\n      ))\n    }\n  }\n\n  /**\n   * Update cache.\n   */\n  cache.val('sc', statCache)\n\n  /**\n   * Return final results object.\n   */\n  return results\n}\n\n/**\n * Get non-magical start of glob.\n * @param {String} pattern glob pattern\n * @returns {String} definitive path\n */\nglob.nonMagic = function (pattern) {\n  let newpath = ''\n\n  for (let sub of pattern.split('/')) {\n    if (sub) {\n      if (sub.indexOf('*') !== -1) {\n        break\n      }\n\n      newpath += path.sep + sub\n    }\n  }\n\n  return newpath.substr(1)\n}\n\nexport default glob\n"]}