{"version":3,"sources":["../../src/utils/fn.js"],"names":["cache","process","env","RECACHE","fn","args","slice","call","last","pop","val","i","a","length","hasOwnProperty","apply","concat"],"mappings":";;;;;;;;AAAA;;;;;;AAMA;;;kBAGe,cAAM;AACnB,MAAMA,QAAQ,EAAd;;AAEA,SAAOC,QAAQC,GAAR,CAAYC,OAAZ,KAAwB,MAAxB,GAAiCC,EAAjC,oDAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACrCC,gBADqC,GAC9B,GAAGC,KAAH,CAASC,IAAT,OAD8B;AAErCC,gBAFqC,GAE9BH,KAAKI,GAAL,EAF8B;AAIvCC,eAJuC,GAIjCV,KAJiC;;AAK3C,iBAASW,CAAT,GAAa,CAAb,EAAgBC,CAAhB,GAAoBP,KAAK,CAAL,CAApB,EAA6BM,IAAIN,KAAKQ,MAAtC,EAA8CF,KAAK,CAAL,EAAQC,IAAIP,KAAKM,CAAL,CAA1D,EAAmE;AACjED,oBAAMA,IAAIE,CAAJ,IAASF,IAAIE,CAAJ,KAAU,EAAzB;AACD;;AAP0C,gBAStCF,IAAII,cAAJ,CAAmBN,IAAnB,CATsC;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAUhBJ,GAAGW,KAAH,CAAS,IAAT,EAAeV,KAAKW,MAAL,CAAY,CAACR,IAAD,CAAZ,CAAf,CAVgB;;AAAA;AAAA,6CAUlCE,IAAIF,IAAJ,CAVkC;;AAAA;AAAA,6CAapCE,IAAIF,IAAJ,CAboC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC,EAAP;AAeD,C","file":"../../src/utils/fn.js","sourcesContent":["/**\n * @file src/utils/fn.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\n/**\n * Makes async functions deterministic.\n */\nexport default fn => {\n  const cache = {}\n\n  return process.env.RECACHE === 'true' ? fn : async function () {\n    const args = [].slice.call(arguments)\n    const last = args.pop()\n\n    let val = cache\n    for (let i = 0, a = args[0]; i < args.length; i += 1, a = args[i]) {\n      val = val[a] = val[a] || {}\n    }\n\n    if (!val.hasOwnProperty(last)) {\n      return val[last] = await fn.apply(this, args.concat([last]))\n    }\n\n    return val[last]\n  }\n}\n"]}