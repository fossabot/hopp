{"version":3,"sources":["../../src/tasks/mgr.js"],"names":["cache","debug","watchlog","log","plugins","pluginConfig","isUndefined","value","undefined","Hopp","src","Array","pluginCtx","d","stack","out","dest","fn","Error","rename","filename","ext","substr","lastIndexOf","prefix","suffix","name","directory","recache","watchers","forEach","newpath","resolve","nonMagic","push","watch","recursive","indexOf","start","Promise","process","on","watcher","close","modified","useDoubleCache","sourcemap","files","freshBuild","unmodified","file","originalFd","tmpBundle","tmpBundlePath","bundle","Date","now","stream","createReadStream","fd","autoClose","replace","end","basename","concat","buildStack","add","dirname","reject","pipe","createWriteStream","map","error","that","mode","plugin","pluginStream","data","handler","then","emit","newData","catch","err","retval","next","done","taskName","args","mod","require","join","config","__esModule","default","logger","pluginCache","needsBundling","needsRecaching","readonly","length","loadedPlugins","hasOwnProperty","loadPlugin","startBundling","body","output","tmp","tmppath","promise","newStream","doRename","all","val","json"],"mappings":"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","file":"mgr.js","sourcesContent":["/**\n * @file src/tasks/mgr.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport pump from 'pump'\nimport glob from '../fs/glob'\nimport through from 'through'\nimport * as cache from '../cache'\nimport mapStream from 'map-stream'\nimport getPath from '../fs/get-path'\nimport { _, createLogger } from '../utils'\nimport { disableFSCache, mkdirp, openFile, tmpFile, tmpFileSync } from '../fs'\nimport { buffer, Bundle, createReadStream } from '../streams'\n\nconst { debug } = createLogger('hopp')\nconst watchlog = createLogger('hopp:watch').log\n\n/**\n * Plugins storage.\n */\nconst plugins = {}\nconst pluginConfig = {}\n\n/**\n * Test for undefined or null.\n */\nfunction isUndefined (value) {\n  return value === undefined || value === null\n}\n\n/**\n * Hopp class to manage tasks.\n */\nexport default class Hopp {\n  /**\n   * Creates a new task with the glob.\n   * DOES NOT START THE TASK.\n   *\n   * @param {Glob} src\n   * @return {Hopp} new hopp object\n   */\n  constructor (src) {\n    if (!(src instanceof Array)) {\n      src = [src]\n    }\n\n    // store context local to each task\n    this.pluginCtx = {}\n\n    // persistent info\n    this.d = {\n      src,\n      stack: []\n    }\n  }\n\n  /**\n   * Sets the destination of this pipeline.\n   * @param {String} out\n   * @return {Hopp} task manager\n   */\n  dest (out) {\n    this.d.dest = out\n    return this\n  }\n\n  /**\n   * Allow renaming of destination files.\n   * @param {Function} fn a renaming function\n   * @returns {Hopp} current object for chaining\n   */\n  rename (fn) {\n    if (typeof fn !== 'function' && typeof fn !== 'object') {\n      throw new Error('Rename must be given a function or object.')\n    }\n\n    this.d.rename = fn\n    return this\n  }\n\n  /**\n   * Actually do the renaming.\n   * @param {String} filename the original name\n   * @returns {String} renamed filename\n   */\n  doRename (filename) {\n    // if no rename is defined, just use current filename\n    if (!this.d.rename) return filename\n\n    // functions are easy, but they break caching\n    if (typeof this.d.rename === 'function') {\n      return this.d.rename(filename)\n    }\n\n    // remove extension\n    let ext = filename.substr(0, filename.lastIndexOf('.'))\n    filename = filename.substr(1 + filename.lastIndexOf('.'))\n\n    // add prefix\n    if (this.d.rename.prefix) {\n      filename = this.d.rename.prefix + filename\n    }\n\n    // add suffix, before extension\n    if (this.d.rename.suffix) {\n      filename += this.d.rename.suffix\n    }\n\n    // change extension\n    if (this.d.rename.ext) {\n      ext = this.d.rename.ext\n    }\n\n    // output final filename\n    return filename + ext\n  }\n\n  /**\n   * Run task in continuous mode.\n   */\n  watch (name, directory, recache = false) {\n    name = `watch:${name}`\n\n    const watchers = []\n\n    this.d.src.forEach(src => {\n      // get most definitive path possible\n      let newpath = path.resolve(directory, glob.nonMagic(src))\n\n      // disable fs caching for watch\n      disableFSCache()\n\n      // start watch\n      watchlog('Watching for %s ...', name)\n      watchers.push(fs.watch(newpath, {\n        recursive: src.indexOf('/**/') !== -1\n      }, () => this.start(name, directory, recache, false)))\n    })\n\n    return new Promise(resolve => {\n      process.on('SIGINT', () => {\n        watchers.forEach(watcher => watcher.close())\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Handles bundling.\n   */\n  async startBundling (name, directory, modified, dest, useDoubleCache = true) {\n    const { log, debug } = createLogger(`hopp:${name}`)\n    debug('Switched to bundling mode')\n\n    /**\n     * Fetch sourcemap from cache.\n     */\n    const sourcemap = cache.sourcemap(name)\n\n    /**\n     * Get full list of current files.\n     */\n    const files = await glob(this.d.src, directory, useDoubleCache, true)\n\n    /**\n     * Create list of unmodified.\n     */\n    let freshBuild = true\n    const unmodified = {}\n\n    for (let file of files) {\n      if (modified.indexOf(file) === -1) {\n        unmodified[file] = true\n        freshBuild = false\n      }\n    }\n\n    /**\n     * Get old bundle & create new one.\n     */\n    const originalFd = freshBuild ? null : await openFile(dest, 'r')\n    const [tmpBundle, tmpBundlePath] = await tmpFile()\n\n    /**\n     * Create new bundle to forward to.\n     */\n    const bundle = new Bundle(directory, tmpBundle)\n\n    /**\n     * Since bundling starts streaming right away, we can count this\n     * as the start of the build.\n     */\n    const start = Date.now()\n    log('Starting task')\n\n    /**\n     * Add all files.\n     */\n    for (let file of files) {\n      let stream\n\n      if (unmodified[file]) {\n        debug('forward: %s', file)\n        stream = fs.createReadStream(null, {\n          fd: originalFd,\n          autoClose: false,\n          start: sourcemap[file.replace(directory, '.')].start,\n          end: sourcemap[file.replace(directory, '.')].end\n        })\n      } else {\n        debug('transform: %s', file)\n        stream = pump([\n          createReadStream(file, dest + '/' + path.basename(file))\n        ].concat(this.buildStack(name)))\n      }\n\n      bundle.add(file, stream)\n    }\n\n    /**\n     * Wait for bundling to end.\n     */\n    await bundle.end(tmpBundlePath)\n\n    /**\n     * Move the bundle to the new location.\n     */\n    if (originalFd) originalFd.close()\n    await mkdirp(path.dirname(dest).replace(directory, ''), directory)\n    await new Promise((resolve, reject) => {\n      const stream = fs.createReadStream(tmpBundlePath).pipe(fs.createWriteStream(dest))\n\n      stream.on('close', resolve)\n      stream.on('error', reject)\n    })\n\n    /**\n     * Update sourcemap.\n     */\n    cache.sourcemap(name, bundle.map)\n\n    log('Task ended (took %s ms)', Date.now() - start)\n  }\n\n  /**\n   * Converts all plugins in the stack into streams.\n   */\n  buildStack (name) {\n    const { error } = createLogger(`hopp:${name}`)\n    const that = this\n\n    let mode = 'stream'\n\n    return this.d.stack.map(([plugin]) => {\n      const pluginStream = through(async function (data) {\n        try {\n          const handler = plugins[plugin](\n            that.pluginCtx[plugin],\n            data\n          )\n\n          // for async functions/promises\n          if (handler instanceof Promise) {\n            handler\n              .then(newData => this.emit('data', newData))\n              .catch(err => this.emit('error', err))\n          } else if ('next' in handler) {\n            let retval\n\n            // for async generators\n            do {\n              retval = await handler.next()\n              this.emit('data', retval.value)\n            } while (!retval.done)\n          } else {\n            // otherwise, fail\n            this.emit('error', new Error('Unknown return value received from ' + plugin))\n          }\n        } catch (err) {\n          this.emit('error', err)\n        }\n      })\n\n      /**\n       * Enable buffer mode if required.\n       */\n      if (mode === 'stream' && pluginConfig[plugin].mode === 'buffer') {\n        mode = 'buffer'\n        return pump(buffer(), pluginStream, err => {\n          if (err) error(err && err.stack ? err.stack : err)\n        })\n      }\n\n      /**\n       * Otherwise keep pumping.\n       */\n      return pluginStream\n    })\n  }\n\n  /**\n   * Loads a plugin, manages its env.\n   */\n  loadPlugin (taskName, plugin, args, directory) {\n    let mod = plugins[plugin]\n\n    if (!mod) {\n      // convert plugin path from relative back to absolute\n      try {\n        mod = require(path.join(directory, 'node_modules', plugin))\n      } catch (err) {\n        debug('failed to load plugin: %s', err && err.stack ? err.stack : err)\n        throw new Error('Failed to load plugin: ' + plugin)\n      }\n\n      // expose module config\n      pluginConfig[plugin] = mod.config || {}\n\n      // if defined as an ES2015 module, assume that the\n      // export is at 'default'\n      if (mod.__esModule === true) {\n        mod = mod.default\n      }\n\n      // add plugins to loaded plugins\n      plugins[plugin] = mod\n    }\n\n    // create plugin logger\n    const logger = createLogger(`hopp:${taskName}:${path.basename(plugin).substr(5)}`)\n\n    // load/create cache for plugin\n    const pluginCache = cache.plugin(plugin)\n\n    // create a new context for this plugin\n    this.pluginCtx[plugin] = {\n      args,\n      cache: pluginCache,\n      log: logger.log,\n      debug: logger.debug,\n      error: logger.error\n    }\n  }\n\n  /**\n   * Starts the pipeline.\n   * @return {Promise} resolves when task is complete\n   */\n  async start (name, directory, recache = false, useDoubleCache = true) {\n    const { log, debug } = createLogger(`hopp:${name}`)\n\n    /**\n     * Figure out if bundling is needed & load plugins.\n     */\n    if (isUndefined(this.needsBundling) || isUndefined(this.needsRecaching) || isUndefined(this.readonly) || (this.d.stack.length > 0 && !this.loadedPlugins)) {\n      this.loadedPlugins = true\n\n      this.d.stack.forEach(([plugin, args]) => {\n        if (!this.pluginCtx.hasOwnProperty(plugin)) {\n          this.loadPlugin(name, plugin, args, directory)\n        }\n\n        this.needsBundling = !!(this.needsBundling || pluginConfig[plugin].bundle)\n        this.needsRecaching = !!(this.needsRecaching || pluginConfig[plugin].recache)\n        this.readonly = !!(this.readonly || pluginConfig[plugin].readonly)\n\n        if (this.needsBundling && this.readonly) {\n          throw new Error('Task chain enabled bundling and readonly mode at the same time. Not sure what to do.')\n        }\n      })\n    }\n\n    /**\n     * Override recaching.\n     */\n    if (this.needsRecaching) {\n      recache = true\n    }\n\n    /**\n     * Get the modified files.\n     */\n    debug('task recache = %s', recache)\n    let files = await glob(this.d.src, directory, useDoubleCache, recache)\n\n    if (files.length > 0) {\n      const dest = this.d.dest ? path.resolve(directory, getPath(this.d.dest)) : ''\n\n      /**\n       * Switch to bundling mode if need be.\n       */\n      if (this.needsBundling) {\n        return this.startBundling(name, directory, files, dest, useDoubleCache)\n      }\n\n      /**\n       * Ensure dist directory exists.\n       */\n      if (!this.readonly || !this.d.dest) {\n        await mkdirp(dest.replace(directory, ''), directory)\n      }\n\n      /**\n       * Create streams.\n       */\n      files = _(files).map(file => ({\n        file,\n        stream: [\n          createReadStream(file, dest + '/' + path.basename(file))\n        ]\n      }))\n\n      /**\n       * Connect plugin streams with pipelines.\n       */\n      if (this.d.stack.length > 0) {\n        files.map(file => {\n          file.stream = file.stream.concat(this.buildStack(name))\n          return file\n        })\n      }\n\n      /**\n       * Connect with destination.\n       */\n      files.map(file => {\n        if (!this.readonly) {\n          // strip out the actual body and write it\n          file.stream.push(mapStream((data, next) => {\n            if (typeof data !== 'object' || !data.hasOwnProperty('body')) {\n              return next(new Error('A plugin has destroyed the stream by returning a non-object.'))\n            }\n\n            next(null, data.body)\n          }))\n\n          // add the writestream at the end\n          let output\n\n          if (!this.d.dest) {\n            const { fd: tmp, name: tmppath } = tmpFileSync()\n            output = fs.createWriteStream(null, {\n              fd: tmp\n            })\n\n            file.promise = new Promise((resolve, reject) => {\n              output.on('close', () => {\n                const newStream =\n                  fs.createReadStream(tmppath)\n                    .pipe(fs.createWriteStream(file.file))\n\n                newStream.on('error', reject)\n                newStream.on('close', resolve)\n              })\n            })\n          } else {\n            output = fs.createWriteStream(dest + '/' + this.doRename(path.basename(file.file)))\n          }\n\n          file.stream.push(output)\n        }\n\n        // promisify the current pipeline\n        return new Promise((resolve, reject) => {\n          // connect all streams together to form pipeline\n          file.stream = pump(file.stream, err => {\n            if (err) reject(err)\n          })\n\n          if (file.promise) {\n            file.promise.then(resolve, reject)\n          } else {\n            file.stream.on('close', resolve)\n          }\n        })\n      })\n\n      // start & wait for all pipelines to end\n      const start = Date.now()\n      log('Starting task')\n      await Promise.all(files.val())\n      log('Task ended (took %s ms)', Date.now() - start)\n    } else {\n      log('Skipping task')\n    }\n  }\n\n  /**\n   * Converts task manager to JSON for storage.\n   * @return {Object} proper JSON object\n   */\n  toJSON () {\n    return {\n      d: this.d,\n      needsBundling: this.needsBundling,\n      needsRecaching: this.needsRecaching,\n      readonly: this.readonly\n    }\n  }\n\n  /**\n   * Deserializes a JSON object into a manager.\n   * @param {Object} json\n   * @return {Hopp} task manager\n   */\n  fromJSON (json) {\n    this.d = json.d\n    this.needsBundling = json.needsBundling\n    this.needsRecaching = json.needsRecaching\n    this.readonly = json.readonly\n\n    return this\n  }\n}\n"]}