{"version":3,"sources":["../../src/tasks/mgr.js"],"names":["cache","debug","watchlog","log","plugins","pluginConfig","isUndefined","value","undefined","Hopp","src","Array","pluginCtx","d","stack","out","dest","fn","Error","rename","filename","dirname","source","ext","substr","lastIndexOf","prefix","suffix","name","directory","recache","watchers","forEach","newpath","resolve","nonMagic","push","watch","recursive","indexOf","start","process","on","watcher","close","modified","useDoubleCache","sourcemap","files","freshBuild","unmodified","file","originalFd","tmpBundle","tmpBundlePath","bundle","Date","now","stream","createReadStream","fd","autoClose","replace","end","basename","concat","buildStack","add","reject","pipe","createWriteStream","map","error","that","mode","plugin","pluginStream","obj","data","_","done","handler","retval","next","err","taskName","args","mod","pathToPlugin","join","require","config","__esModule","default","logger","pluginCache","needsBundling","needsRecaching","readonly","length","loadedPlugins","hasOwnProperty","loadPlugin","env","SKIP_BUILD","startBundling","outfile","doRename","body","output","tmp","tmppath","promise","newStream","then","val","json"],"mappings":"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","file":"../../src/tasks/mgr.js","sourcesContent":["/**\n * @file src/tasks/mgr.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport pump from 'pump'\nimport glob from '../fs/glob'\nimport through2 from 'through2'\nimport * as cache from '../cache'\nimport getPath from '../fs/get-path'\nimport { _, createLogger } from '../utils'\nimport { disableFSCache, mkdirp, openFile, tmpFile, tmpFileSync } from '../fs'\nimport { buffer, Bundle, createReadStream, map as mapStream } from '../streams'\n\nconst { debug } = createLogger('hopp')\nconst watchlog = createLogger('hopp:watch').log\n\n/**\n * Plugins storage.\n */\nconst plugins = {}\nconst pluginConfig = {}\n\n/**\n * Test for undefined or null.\n */\nfunction isUndefined (value) {\n  return value === undefined || value === null\n}\n\n/**\n * Hopp class to manage tasks.\n */\nexport default class Hopp {\n  /**\n   * Creates a new task with the glob.\n   * DOES NOT START THE TASK.\n   *\n   * @param {Glob} src\n   * @return {Hopp} new hopp object\n   */\n  constructor (src) {\n    if (!(src instanceof Array)) {\n      src = [src]\n    }\n\n    // store context local to each task\n    this.pluginCtx = {}\n\n    // persistent info\n    this.d = {\n      src,\n      stack: []\n    }\n  }\n\n  /**\n   * Sets the destination of this pipeline.\n   * @param {String} out\n   * @return {Hopp} task manager\n   */\n  dest (out) {\n    this.d.dest = out\n    return this\n  }\n\n  /**\n   * Allow renaming of destination files.\n   * @param {Function} fn a renaming function\n   * @returns {Hopp} current object for chaining\n   */\n  rename (fn) {\n    if (typeof fn !== 'function' && typeof fn !== 'object') {\n      throw new Error('Rename must be given a function or object.')\n    }\n\n    this.d.rename = fn\n    return this\n  }\n\n  /**\n   * Actually do the renaming.\n   * @param {String} filename the original name\n   * @returns {String} renamed filename\n   */\n  doRename (filename, dirname, source) {\n    // if no rename is defined, just use current filename\n    if (!this.d.rename) return dirname + '/' + filename\n\n    // functions are easy, but they break caching\n    if (typeof this.d.rename === 'function') {\n      return this.d.rename(filename, dirname, source)\n    }\n\n    // remove extension\n    let ext = filename.substr(1 + filename.lastIndexOf('.'))\n    filename = filename.substr(0, filename.lastIndexOf('.'))\n\n    // add prefix\n    if (this.d.rename.prefix) {\n      filename = this.d.rename.prefix + filename\n    }\n\n    // add suffix, before extension\n    if (this.d.rename.suffix) {\n      filename += this.d.rename.suffix\n    }\n\n    // change extension\n    if (this.d.rename.ext) {\n      ext = this.d.rename.ext\n    }\n\n    // output final filename into same dest directory\n    return dirname + '/' + filename + '.' + ext\n  }\n\n  /**\n   * Run task in continuous mode.\n   */\n  watch (name, directory, recache = false) {\n    name = `watch:${name}`\n\n    const watchers = []\n\n    this.d.src.forEach(src => {\n      // get most definitive path possible\n      let newpath = path.resolve(directory, glob.nonMagic(src))\n\n      // disable fs caching for watch\n      disableFSCache()\n\n      // start watch\n      watchlog('Watching for %s ...', name)\n      watchers.push(fs.watch(newpath, {\n        recursive: src.indexOf('/**/') !== -1\n      }, () => this.start(name, directory, recache, false)))\n    })\n\n    return new Promise(resolve => {\n      process.on('SIGINT', () => {\n        watchers.forEach(watcher => watcher.close())\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Handles bundling.\n   */\n  async startBundling (name, directory, modified, dest, useDoubleCache = true) {\n    const { log, debug } = createLogger(`hopp:${name}`)\n    debug('Switched to bundling mode')\n\n    /**\n     * Fetch sourcemap from cache.\n     */\n    const sourcemap = cache.sourcemap(name)\n\n    /**\n     * Get full list of current files.\n     */\n    const files = await glob(name, this.d.src, directory, useDoubleCache, true)\n\n    /**\n     * Create list of unmodified.\n     */\n    let freshBuild = true\n    const unmodified = {}\n\n    for (let file of files) {\n      if (modified.indexOf(file) === -1) {\n        unmodified[file] = true\n        freshBuild = false\n      }\n    }\n\n    /**\n     * Get old bundle & create new one.\n     */\n    const originalFd = freshBuild ? null : await openFile(dest, 'r')\n    const [tmpBundle, tmpBundlePath] = await tmpFile()\n\n    /**\n     * Create new bundle to forward to.\n     */\n    const bundle = new Bundle(directory, tmpBundle)\n\n    /**\n     * Since bundling starts streaming right away, we can count this\n     * as the start of the build.\n     */\n    const start = Date.now()\n    log('Starting task')\n\n    /**\n     * Add all files.\n     */\n    for (let file of files) {\n      let stream\n\n      if (unmodified[file]) {\n        debug('forward: %s', file)\n        stream = fs.createReadStream(null, {\n          fd: originalFd,\n          autoClose: false,\n          start: sourcemap[file.replace(directory, '.')].start,\n          end: sourcemap[file.replace(directory, '.')].end\n        })\n      } else {\n        debug('transform: %s', file)\n        stream = pump([\n          createReadStream(file, dest + '/' + path.basename(file))\n        ].concat(this.buildStack(name)))\n      }\n\n      bundle.add(file, stream)\n    }\n\n    /**\n     * Wait for bundling to end.\n     */\n    await bundle.end(tmpBundlePath)\n\n    /**\n     * Move the bundle to the new location.\n     */\n    if (originalFd) originalFd.close()\n    await mkdirp(path.dirname(dest).replace(directory, ''), directory)\n    await new Promise((resolve, reject) => {\n      const stream = fs.createReadStream(tmpBundlePath).pipe(fs.createWriteStream(dest))\n\n      stream.on('close', resolve)\n      stream.on('error', reject)\n    })\n\n    /**\n     * Update sourcemap.\n     */\n    cache.sourcemap(name, bundle.map)\n\n    log('Task ended (took %s ms)', Date.now() - start)\n  }\n\n  /**\n   * Converts all plugins in the stack into streams.\n   */\n  buildStack (name) {\n    const { error } = createLogger(`hopp:${name}`)\n    const that = this\n\n    let mode = 'stream'\n\n    return this.d.stack.map(([plugin]) => {\n      const pluginStream = through2.obj(async function (data, _, done) {\n        try {\n          const handler = plugins[plugin](\n            that.pluginCtx[plugin],\n            data\n          )\n\n          // for async functions/promises\n          if ('then' in handler) {\n            try {\n              this.push(await handler)\n              done()\n            } catch (err) {\n              done(err)\n            }\n          } else if ('next' in handler) {\n            let retval\n\n            // for async generators\n            do {\n              retval = await handler.next()\n              this.push(retval.value)\n            } while (!retval.done)\n\n            done()\n          } else {\n            // otherwise, fail\n            done(new Error('Unknown return value received from ' + plugin))\n          }\n        } catch (err) {\n          done(err)\n        }\n      })\n\n      /**\n       * Enable buffer mode if required.\n       */\n      if (mode === 'stream' && pluginConfig[plugin].mode === 'buffer') {\n        mode = 'buffer'\n        return pump(buffer(), pluginStream, err => {\n          if (err) error(err && err.stack ? err.stack : err)\n        })\n      }\n\n      /**\n       * Otherwise keep pumping.\n       */\n      return pluginStream\n    })\n  }\n\n  /**\n   * Loads a plugin, manages its env.\n   */\n  loadPlugin (taskName, plugin, args, directory) {\n    let mod = plugins[plugin]\n\n    if (!mod) {\n      // convert plugin path from relative back to absolute\n      try {\n        let pathToPlugin = plugin\n\n        if (plugin[0] !== '/') {\n          pathToPlugin = path.join(directory, 'node_modules', plugin)\n        }\n\n        mod = require(pathToPlugin)\n      } catch (err) {\n        debug('failed to load plugin: %s', err && err.stack ? err.stack : err)\n        throw new Error('Failed to load plugin: ' + plugin)\n      }\n\n      // expose module config\n      pluginConfig[plugin] = mod.config || {}\n\n      // if defined as an ES2015 module, assume that the\n      // export is at 'default'\n      if (mod.__esModule === true) {\n        mod = mod.default\n      }\n\n      // add plugins to loaded plugins\n      plugins[plugin] = mod\n    }\n\n    // create plugin logger\n    const logger = createLogger(`hopp:${taskName}:${path.basename(plugin).substr(5)}`)\n\n    // load/create cache for plugin\n    const pluginCache = cache.plugin(plugin)\n\n    // create a new context for this plugin\n    this.pluginCtx[plugin] = {\n      args,\n      cache: pluginCache,\n      log: logger.log,\n      debug: logger.debug,\n      error: logger.error\n    }\n  }\n\n  /**\n   * Starts the pipeline.\n   * @return {Promise} resolves when task is complete\n   */\n  async start (name, directory, recache = false, useDoubleCache = true) {\n    const { log, debug } = createLogger(`hopp:${name}`)\n\n    /**\n     * Figure out if bundling is needed & load plugins.\n     */\n    if (isUndefined(this.needsBundling) || isUndefined(this.needsRecaching) || isUndefined(this.readonly) || (this.d.stack.length > 0 && !this.loadedPlugins)) {\n      this.loadedPlugins = true\n\n      this.d.stack.forEach(([plugin, args]) => {\n        if (!this.pluginCtx.hasOwnProperty(plugin)) {\n          this.loadPlugin(name, plugin, args, directory)\n        }\n\n        this.needsBundling = !!(this.needsBundling || pluginConfig[plugin].bundle)\n        this.needsRecaching = !!(this.needsRecaching || pluginConfig[plugin].recache)\n        this.readonly = !!(this.readonly || pluginConfig[plugin].readonly)\n\n        if (this.needsBundling && this.readonly) {\n          throw new Error('Task chain enabled bundling and readonly mode at the same time. Not sure what to do.')\n        }\n      })\n    }\n\n    /**\n     * Override recaching.\n     */\n    if (this.needsRecaching) {\n      recache = true\n    }\n\n    /**\n     * Get the modified files.\n     */\n    debug('task recache = %s', recache)\n    let files = await glob(name, this.d.src, directory, useDoubleCache, recache)\n\n    /**\n     * Quit now if we want to build skipping.\n     */\n    if (process.env.SKIP_BUILD === 'true') {\n      log('Updated cache')\n      return\n    }\n\n    if (files.length > 0) {\n      const dest = this.d.dest ? path.resolve(directory, getPath(this.d.dest)) : ''\n\n      /**\n       * Switch to bundling mode if need be.\n       */\n      if (this.needsBundling) {\n        return this.startBundling(name, directory, files, dest, useDoubleCache)\n      }\n\n      /**\n       * Ensure dist directory exists.\n       */\n      if (!this.readonly || !this.d.dest) {\n        await mkdirp(dest.replace(directory, ''), directory)\n      }\n\n      /**\n       * Create streams.\n       */\n      files = _(files).map(file => {\n        const outfile = this.doRename(path.basename(file), dest, file)\n\n        return {\n          file,\n          outfile,\n          stream: [\n            createReadStream(file, outfile)\n          ]\n        }\n      })\n\n      /**\n       * Connect plugin streams with pipelines.\n       */\n      if (this.d.stack.length > 0) {\n        files.map(file => {\n          file.stream = file.stream.concat(this.buildStack(name))\n          return file\n        })\n      }\n\n      /**\n       * Connect with destination.\n       */\n      files.map(file => {\n        if (!this.readonly) {\n          // strip out the actual body and write it\n          file.stream.push(mapStream((data, next) => {\n            if (typeof data !== 'object' || !data.hasOwnProperty('body')) {\n              return next(new Error('A plugin has destroyed the stream by returning a non-object.'))\n            }\n\n            next(null, data.body)\n          }))\n\n          // add the writestream at the end\n          let output\n\n          if (!this.d.dest) {\n            const { fd: tmp, name: tmppath } = tmpFileSync()\n            output = fs.createWriteStream(null, {\n              fd: tmp\n            })\n\n            file.promise = new Promise((resolve, reject) => {\n              output.on('close', () => {\n                const newStream =\n                  fs.createReadStream(tmppath)\n                    .pipe(fs.createWriteStream(file.file))\n\n                newStream.on('error', reject)\n                newStream.on('close', resolve)\n              })\n            })\n          } else {\n            debug('Set output: %s', file.outfile)\n            output = fs.createWriteStream(file.outfile)\n          }\n\n          file.stream.push(output)\n        }\n\n        // promisify the current pipeline\n        return new Promise((resolve, reject) => {\n          // connect all streams together to form pipeline\n          file.stream = pump(file.stream, err => {\n            if (err) reject(err)\n          })\n\n          if (file.promise) {\n            file.promise.then(resolve, reject)\n          } else {\n            file.stream.on('close', resolve)\n          }\n        })\n      })\n\n      // start & wait for all pipelines to end\n      const start = Date.now()\n      log('Starting task')\n      await Promise.all(files.val())\n      log('Task ended (took %s ms)', Date.now() - start)\n    } else {\n      log('Skipping task')\n    }\n  }\n\n  /**\n   * Converts task manager to JSON for storage.\n   * @return {Object} proper JSON object\n   */\n  toJSON () {\n    return {\n      d: this.d,\n      needsBundling: this.needsBundling,\n      needsRecaching: this.needsRecaching,\n      readonly: this.readonly\n    }\n  }\n\n  /**\n   * Deserializes a JSON object into a manager.\n   * @param {Object} json\n   * @return {Hopp} task manager\n   */\n  fromJSON (json) {\n    this.d = json.d\n    this.needsBundling = json.needsBundling\n    this.needsRecaching = json.needsRecaching\n    this.readonly = json.readonly\n\n    return this\n  }\n}\n"]}