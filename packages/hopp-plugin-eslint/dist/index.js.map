{"version":3,"sources":["../lib/index.js"],"names":["require","config","mode","readonly","ctx","data","linter","args","results","executeOnText","body","toString"],"mappings":";;;;;;;AAKA;;2cALA;;;;;AAOA;;;AAGAA,QAAQ,6BAAR;;AAEO,IAAMC,0BAAS;AACpBC,QAAM,QADc;AAEpBC,YAAU;AAFU,CAAf;;;uDAKQ,iBAAOC,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AACb;AACA,gBAAI,CAACD,IAAIE,MAAT,EAAiB;AACfF,kBAAIE,MAAJ,GAAa,sBAAcF,IAAIG,IAAJ,CAAS,CAAT,KAAe,EAA7B,CAAb;AACD;;AAED;AACAF,iBAAKG,OAAL,GAAeJ,IAAIE,MAAJ,CAAWG,aAAX,CAAyBJ,KAAKK,IAAL,CAAUC,QAAV,CAAmB,MAAnB,CAAzB,CAAf;;AAPa,6CASNN,IATM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"../lib/index.js","sourcesContent":["/**\n * @file index.src.js\n * @license MIT\n */\n\nimport { CLIEngine } from 'eslint'\n\n/**\n * For node v4.\n */\nrequire('regenerator-runtime/runtime')\n\nexport const config = {\n  mode: 'buffer',\n  readonly: true\n}\n\nexport default async (ctx, data) => {\n  // create new linter\n  if (!ctx.linter) {\n    ctx.linter = new CLIEngine(ctx.args[0] || {})\n  }\n\n  // lint file\n  data.results = ctx.linter.executeOnText(data.body.toString('utf8'))\n\n  return data\n}\n"]}