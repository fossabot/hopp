{"version":3,"sources":["../lib/index.js"],"names":["require","config","mode","ctx","data","args","length","Error","options","Object","assign","load","render","body","toString","compiled","sourcemap","Promise","resolve","reject","writeFile","dest","JSON","stringify","err","result","basename"],"mappings":";;;;;;;AAKA;;;;AACA;;;;AACA;;;;;;2cAPA;;;;;AASA;;;AAGAA,QAAQ,6BAAR;;AAEA;;;AAGO,IAAMC,0BAAS;AACpBC,QAAM;AADc,CAAf;;;uDAIQ,iBAAOC,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACTD,IAAIE,IAAJ,CAASC,MAAT,KAAoB,CAApB,IAAyBH,IAAIE,IAAJ,CAASC,MAAT,KAAoB,CADpC;AAAA;AAAA;AAAA;;AAAA,kBAEL,IAAIC,KAAJ,CAAU,iCAAV,CAFK;;AAAA;;AAKb;AACMC,mBANO,GAMGC,OAAOC,MAAP,CAAc,EAAd,EAAkBP,IAAIE,IAAJ,CAAS,CAAT,KAAe,EAAjC,CANH;;AAQb;;AARa;AAAA,mBASU,iBAAOM,IAAP,CAAYR,IAAIE,IAAJ,CAAS,CAAT,CAAZ,EAAyBO,MAAzB,CAAgCR,KAAKS,IAAL,CAAUC,QAAV,CAAmB,MAAnB,CAAhC,EAA4DN,OAA5D,CATV;;AAAA;AASPO,oBATO;;AAAA,iBAYTP,QAAQQ,SAZC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAaL,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,2BAAGC,SAAH,CAAahB,KAAKiB,IAAL,GAAY,MAAzB,EAAiCC,KAAKC,SAAL,CAAeR,SAASC,SAAxB,CAAjC,EAAqE,eAAO;AAC1E,oBAAIQ,GAAJ,EAASL,OAAOK,GAAP,EAAT,KACKN;AACN,eAHD;AAID,aALK,CAbK;;AAAA;;AAqBb;AACAd,iBAAKS,IAAL,GAAYE,SAASU,MAArB;;AAEA;AACA,gBAAIjB,QAAQQ,SAAZ,EAAuB;AACrBZ,mBAAKS,IAAL,IAAc,4BAA2B,eAAKa,QAAL,CAActB,KAAKiB,IAAnB,CAAyB,MAAlE;AACD;;AAED;AA7Ba,6CA8BNjB,IA9BM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"../lib/index.js","sourcesContent":["/**\n * @file index.src.js\n * @license MIT\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport accord from 'accord'\n\n/**\n * For node v4.\n */\nrequire('regenerator-runtime/runtime')\n\n/**\n * Config defaults.\n */\nexport const config = {\n  mode: 'buffer'\n}\n\nexport default async (ctx, data) => {\n  if (ctx.args.length !== 1 && ctx.args.length !== 2) {\n    throw new Error('Unexpected number of arguments.')\n  }\n\n  // get options\n  const options = Object.assign({}, ctx.args[1] || {})\n\n  // compile with accord\n  const compiled = await accord.load(ctx.args[0]).render(data.body.toString('utf8'), options)\n\n  // generate source map\n  if (options.sourcemap) {\n    await new Promise((resolve, reject) => {\n      fs.writeFile(data.dest + '.map', JSON.stringify(compiled.sourcemap), err => {\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }\n\n  // set code\n  data.body = compiled.result\n\n  // add sourcemap link\n  if (options.sourcemap) {\n    data.body += `\\n\\n//# sourceMappingURL=${path.basename(data.dest)}.map`\n  }\n\n  // continue\n  return data\n}\n"]}