{"version":3,"sources":["../src/cache.js"],"names":["require","debug","log","lock","load","directory","Error","lockfile","process","env","RECACHE","p","JSON","parse","val","key","value","undefined","plugin","plugins","hasOwnProperty","pluginName","sourcemap","taskName","sm","save","stringify"],"mappings":";;;;;;;AAMA;;AAOA;;;;;;2cAbA;;;;;;eAeuBA,QAAQ,aAAR,EAAuB,MAAvB,C;IAAfC,K,YAAAA,K;IAAOC,G,YAAAA,G;;AACf,IAAIC,aAAJ;;AAEA;;;;;AAKO,IAAMC;AAAA,uDAAO,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEdF,IAFc;AAAA;AAAA;AAAA;;AAAA,6CAEDA,IAFC;;AAAA;AAAA,0BAKd,OAAOE,SAAP,KAAqB,QALP;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAK0B,gBAAOA,SAAP,CAL1B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAMV,IAAIC,KAAJ,CAAU,8BAA8BD,SAAxC,CANU;;AAAA;;AASlB;AACME,oBAVY,GAUEF,SAVF;;AAYlB;;AAZkB,0BAadG,QAAQC,GAAR,CAAYC,OAbE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAagB,gBAAOH,QAAP,CAbhB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,6CAcRJ,OAAO,EAACQ,GAAE,EAAH,EAdC;;AAAA;;AAiBlB;AACAV,kBAAM,eAAN;AAlBkB;AAAA,0BAoBDW,IApBC;AAAA;AAAA,mBAoBgB,kBAASL,QAAT,EAAmB,MAAnB,CApBhB;;AAAA;AAAA;AAAA,6CAoBRJ,IApBQ,eAoBIU,KApBJ;;AAAA;AAAA;AAAA;;AAsBhBX,gBAAI,4BAAJ;AAtBgB,6CAuBRC,OAAO,EAACQ,GAAE,EAAH,EAvBC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA2BP;;;;;;AAMO,IAAMG,oBAAM,SAANA,GAAM,CAACC,GAAD,EAAMC,KAAN,EAAgB;AACjC,MAAIA,UAAUC,SAAd,EAAyB;AACvB,WAAOd,KAAKY,GAAL,CAAP;AACD;;AAEDZ,OAAKY,GAAL,IAAYC,KAAZ;AACD,CANM;;AAQP;;;;AAIO,IAAME,0BAAS,SAATA,MAAS,aAAc;AAClC,MAAMC,UAAUL,IAAI,GAAJ,CAAhB;;AAEA,MAAI,CAACK,QAAQC,cAAR,CAAuBC,UAAvB,CAAL,EAAyC;AACvCF,YAAQE,UAAR,IAAsB,EAAtB;AACD;;AAED,SAAOF,QAAQE,UAAR,CAAP;AACD,CARM;;AAUP;;;;;;AAMO,IAAMC,gCAAY,mBAACC,QAAD,EAAWC,EAAX,EAAkB;AACzC,MAAIF,YAAYR,IAAI,IAAJ,CAAhB;;AAEA,MAAI,CAACQ,SAAL,EAAgB;AACdR,QAAI,IAAJ,EAAUQ,YAAY,EAAtB;AACD;;AAED,MAAIE,EAAJ,EAAQ;AACNF,cAAUC,QAAV,IAAsBC,EAAtB;AACD,GAFD,MAEO;AACLF,cAAUC,QAAV,IAAsBD,UAAUC,QAAV,KAAuB,EAA7C;AACD;;AAED,SAAOD,SAAP;AACD,CAdM;;AAgBP;;;;AAIO,IAAMG;AAAA,wDAAO,kBAAMpB,SAAN;AAAA;AAAA;AAAA;AAAA;AAClBJ,kBAAM,cAAN;AADkB;AAAA,mBAEZ,mBAAUI,YAAY,YAAtB,EAAoCO,KAAKc,SAAL,CAAevB,IAAf,CAApC,CAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"cache.js","sourcesContent":["/**\n * @file src/cache/load.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport {\n  stat,\n  mkdir,\n  exists,\n  readFile,\n  writeFile,\n} from './fs'\nimport path from 'path'\n\nconst { debug, log } = require('./utils/log')('hopp')\nlet lock\n\n/**\n * Loads a cache from the project.\n * @param {String} directory project directory\n * @return {Object} the loaded cache\n */\nexport const load = async directory => {\n  // send back internal cache if reloading\n  if (lock) return lock\n\n  // verify directory\n  if (typeof directory !== 'string' || !await exists(directory)) {\n    throw new Error('Invalid directory given: ' + directory)\n  }\n\n  // set cache file\n  const lockfile = `${directory}/hopp.lock`\n\n  // bring cache into existence\n  if (process.env.RECACHE || !await exists(lockfile)) {\n    return (lock = {p:{}})\n  }\n\n  // load lock file\n  debug('Loading cache')\n  try {\n    return (lock = JSON.parse(await readFile(lockfile, 'utf8')))\n  } catch (_) {\n    log('Corrupted cache; ejecting.')\n    return (lock = {p:{}})\n  }\n}\n\n/**\n * Adds/replaces a value in the cache.\n * @param {String} key\n * @param {Any} value anything stringifiable\n * @returns {Any?} value from cache\n */\nexport const val = (key, value) => {\n  if (value === undefined) {\n    return lock[key]\n  }\n  \n  lock[key] = value\n}\n\n/**\n * Load/create cache for a plugin.\n * @param {}\n */\nexport const plugin = pluginName => {\n  const plugins = val('p')\n\n  if (!plugins.hasOwnProperty(pluginName)) {\n    plugins[pluginName] = {}\n  }\n\n  return plugins[pluginName]\n}\n\n/**\n * Get/set a sourcemap.\n * @param {String} taskName name of the task\n * @param {Object} sm sourcemap to save for the task\n * @returns {Object} sourcemap from cache\n */\nexport const sourcemap = (taskName, sm) => {\n  let sourcemap = val('sm')\n\n  if (!sourcemap) {\n    val('sm', sourcemap = {})\n  }\n\n  if (sm) {\n    sourcemap[taskName] = sm\n  } else {\n    sourcemap[taskName] = sourcemap[taskName] || {}\n  }\n\n  return sourcemap\n}\n\n/**\n * Saves the lockfile again.\n * @param {*} directory \n */\nexport const save = async directory => {\n  debug('Saving cache')\n  await writeFile(directory + '/hopp.lock', JSON.stringify(lock))\n}\n"]}