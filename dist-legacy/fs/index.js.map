{"version":3,"sources":["../../src/fs/index.js"],"names":["require","debug","useCache","promisify","fn","name","fnCall","args","slice","call","arguments","Promise","resolve","reject","apply","concat","err","cacheCall","disableFSCache","exists","dir","res","stat","mkdir","openFile","open","readdir","readFile","writeFile","tmpFile","file","fdpath","fd","mkdirp","directory","cwd","split","sep","String","indexOf"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @file src/fs.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport fs from 'fs'\nimport tmp from 'tmp'\nimport path from 'path'\nimport { fn as wrap } from '../utils'\n\nconst { debug } = require('../utils/log')('hopp:fs')\n\nlet useCache = true\n\n/**\n * Similar to bluebird's Promise.promisify.\n * @param {Function} fn the async-callback function to transform\n * @return {Function} a new promise-based function\n */\nfunction promisify(fn, name) {\n  /**\n   * Create function call wrapper.\n   */\n  const fnCall = function () {\n    const args = [].slice.call(arguments)\n    debug('%s(%j)', name, args)\n    return new Promise((resolve, reject) => {\n      fn.apply(this, args.concat([function (err) {\n        if (err) reject(err)\n        else resolve.apply(null, [].slice.call(arguments, 1))\n      }]))\n    })\n  }\n\n  /**\n   * Create deterministic wrapper.\n   */\n  const cacheCall = wrap(fnCall)\n\n  /**\n   * Return conditional cache.\n   */\n  return function () {\n    if (useCache) return cacheCall.apply(this, arguments)\n    return fnCall.apply(this, arguments)\n  }\n}\n\n/**\n * Allow disabling of cache.\n */\nexport const disableFSCache = () => {\n  debug('Disabling fs cache')\n  useCache = false\n}\n\n/**\n * Transform only needed methods (instead of using mz\n * or doing a promisifyAll).\n */\nexport const exists = dir => new Promise(res => fs.exists(dir, res))\nexport const stat = promisify(fs.stat, 'stat')\nexport const mkdir = promisify(fs.mkdir, 'mkdir')\nexport const openFile = promisify(fs.open, 'open')\nexport const readdir = promisify(fs.readdir, 'readdir')\nexport const readFile = promisify(fs.readFile, 'readFile')\nexport const writeFile = promisify(fs.writeFile, 'writeFile')\n\n/**\n * Create temporary file.\n */\nexport const tmpFile = () => new Promise((resolve, reject) => {\n  tmp.file((err, fdpath, fd) => {\n    if (err) reject(err)\n    else resolve([fd, fdpath])\n  })\n})\n\n/**\n * mkdir -p\n */\nexport const mkdirp = wrap(async (directory, cwd) => {\n  // explode into separate\n  directory = directory.split(path.sep)\n\n  // walk\n  for (let dir of directory) {\n    if (dir) {\n      try {\n        await mkdir(cwd + path.sep + dir)\n      } catch (err) {\n        if (String(err).indexOf('EEXIST') === -1) {\n          throw err\n        }\n      }\n    }\n\n    cwd += path.sep + dir\n  }\n})\n"]}