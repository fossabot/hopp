{"version":3,"sources":["../../src/tasks/mgr.js"],"names":["cache","watchlog","log","plugins","pluginConfig","isUndefined","value","undefined","Hopp","src","Array","pluginCtx","d","stack","out","dest","name","directory","recache","watchers","forEach","newpath","split","sub","indexOf","sep","resolve","substr","push","watch","recursive","start","Promise","process","on","watcher","close","modified","useDoubleCache","debug","sourcemap","files","freshBuild","unmodified","file","originalFd","tmpBundle","tmpBundlePath","bundle","Date","now","stream","createReadStream","fd","autoClose","end","basename","concat","buildStack","add","dirname","replace","reject","pipe","createWriteStream","map","that","mode","plugin","pluginStream","data","handler","then","emit","newData","catch","err","retval","next","done","Error","taskName","args","mod","require","config","__esModule","default","logger","pluginCache","error","needsBundling","needsRecaching","length","loadedPlugins","hasOwnProperty","loadPlugin","startBundling","body","all","val","json"],"mappings":"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","file":"mgr.js","sourcesContent":["/**\n * @file src/tasks/mgr.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport pump from 'pump'\nimport glob from '../fs/glob'\nimport through from 'through'\nimport * as cache from '../cache'\nimport mapStream from 'map-stream'\nimport getPath from '../fs/get-path'\nimport { _, createLogger } from '../utils'\nimport { disableFSCache, mkdirp, openFile, tmpFile } from '../fs'\nimport { buffer, createBundle, createReadStream } from '../streams'\n\nconst watchlog = createLogger('hopp:watch').log\n\n/**\n * Plugins storage.\n */\nconst plugins = {}\nconst pluginConfig = {}\n\n/**\n * Test for undefined or null.\n */\nfunction isUndefined(value) {\n  return value === undefined || value === null\n}\n\n/**\n * Hopp class to manage tasks.\n */\nexport default class Hopp {\n  /**\n   * Creates a new task with the glob.\n   * DOES NOT START THE TASK.\n   * \n   * @param {Glob} src\n   * @return {Hopp} new hopp object\n   */\n  constructor (src) {\n    if (!(src instanceof Array)) {\n      src = [src]\n    }\n\n    // store context local to each task\n    this.pluginCtx = {}\n\n    // persistent info\n    this.d = {\n      src,\n      stack: []\n    }\n  }\n\n  /**\n   * Sets the destination of this pipeline.\n   * @param {String} out\n   * @return {Hopp} task manager\n   */\n  dest (out) {\n    this.d.dest = out\n    return this\n  }\n\n  /**\n   * Run task in continuous mode.\n   */\n  watch (name, directory, recache = false) {\n    name = `watch:${name}`\n\n    const watchers = []\n\n    this.d.src.forEach(src => {\n      // get most definitive path possible\n      let newpath = ''\n      for (let sub of src.split('/')) {\n        if (sub) {\n          if (sub.indexOf('*') !== -1) {\n            break\n          }\n\n          newpath += path.sep + sub\n        }\n      }\n      newpath = path.resolve(directory, newpath.substr(1))\n\n      // disable fs caching for watch\n      disableFSCache()\n\n      // start watch\n      watchlog('Watching for %s ...', name)\n      watchers.push(fs.watch(newpath, {\n        recursive: src.indexOf('/**/') !== -1\n      }, () => this.start(name, directory, recache, false)))\n    })\n\n    return new Promise(resolve => {\n      process.on('SIGINT', () => {\n        watchers.forEach(watcher => watcher.close())\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Handles bundling.\n   */\n  async startBundling(name, directory, modified, dest, useDoubleCache = true) {\n    const { log, debug } = createLogger(`hopp:${name}`)\n    debug('Switched to bundling mode')\n\n    /**\n     * Fetch sourcemap from cache.\n     */\n    const sourcemap = cache.sourcemap(name)\n\n    /**\n     * Get full list of current files.\n     */\n    const files = await glob(this.d.src, directory, useDoubleCache, true)\n\n    /**\n     * Create list of unmodified.\n     */\n    let freshBuild = true\n    const unmodified = {}\n\n    for (let file of files) {\n      if (modified.indexOf(file) === -1) {\n        unmodified[file] = true\n        freshBuild = false\n      }\n    }\n\n    /**\n     * Get old bundle & create new one.\n     */\n    const originalFd = freshBuild ? null : await openFile(dest, 'r')\n        , [tmpBundle, tmpBundlePath] = await tmpFile()\n    \n    /**\n     * Create new bundle to forward to.\n     */\n    const bundle = createBundle(tmpBundle)\n\n    /**\n     * Since bundling starts streaming right away, we can count this\n     * as the start of the build.\n     */\n    const start = Date.now()\n    log('Starting task')\n\n    /**\n     * Add all files.\n     */\n    for (let file of files) {\n      let stream\n\n      if (unmodified[file]) {\n        debug('forward: %s', file)\n        stream = fs.createReadStream(null, {\n          fd: originalFd,\n          autoClose: false,\n          start: sourcemap[file].start,\n          end: sourcemap[file].end\n        })\n      } else {\n        debug('transform: %s', file)\n        stream = pump([\n          createReadStream(file, dest + '/' + path.basename(file))\n        ].concat(this.buildStack()))\n      }\n\n      bundle.add(file, stream)\n    }\n\n    /**\n     * Wait for bundling to end.\n     */\n    await bundle.end(tmpBundlePath)\n\n    /**\n     * Move the bundle to the new location.\n     */\n    if (originalFd) originalFd.close()\n    await mkdirp(path.dirname(dest).replace(directory, ''), directory)\n    await new Promise((resolve, reject) => {\n      const stream = fs.createReadStream(tmpBundlePath).pipe(fs.createWriteStream(dest))\n\n      stream.on('close', resolve)\n      stream.on('error', reject)\n    })\n\n    /**\n     * Update sourcemap.\n     */\n    cache.sourcemap(name, bundle.map)\n\n    log('Task ended (took %s ms)', Date.now() - start)\n  }\n\n  /**\n   * Converts all plugins in the stack into streams.\n   */\n  buildStack () {\n    const that = this\n    let mode = 'stream'\n\n    return this.d.stack.map(([plugin]) => {\n      const pluginStream = through(async function (data) {\n        try {\n          const handler = plugins[plugin](\n            that.pluginCtx[plugin],\n            data\n          )\n\n          // for async functions/promises\n          if (handler instanceof Promise) {\n            handler\n              .then(newData => this.emit('data', newData))\n              .catch(err => this.emit('error', err))\n          }\n\n          // for async generators\n          else if ('next' in handler) {\n            let retval\n\n            do {\n              retval = await handler.next()\n              this.emit('data', retval.value)\n            } while (!retval.done);\n          }\n\n          // otherwise, fail\n          else {\n            this.emit('error', new Error('Unknown return value received from ' + plugin))\n          }\n        } catch (err) {\n          this.emit('error', err)\n        }\n      })\n\n      /**\n       * Enable buffer mode if required.\n       */\n      if (mode === 'stream' && pluginConfig[plugin].mode === 'buffer') {\n        mode = 'buffer'\n        return pump(buffer(), pluginStream)\n      }\n\n      /**\n       * Otherwise keep pumping.\n       */\n      return pluginStream\n    })\n  }\n\n  /**\n   * Loads a plugin, manages its env.\n   */\n  loadPlugin (taskName, plugin, args) {\n    let mod = plugins[plugin]\n    \n    if (!mod) {\n      mod = require(plugin)\n      \n      // expose module config\n      pluginConfig[plugin] = mod.config || {}\n\n      // if defined as an ES2015 module, assume that the\n      // export is at 'default'\n      if (mod.__esModule === true) {\n        mod = mod.default\n      }\n\n      // add plugins to loaded plugins\n      plugins[plugin] = mod\n    }\n\n    // create plugin logger\n    const logger = createLogger(`hopp:${taskName}:${path.basename(plugin).substr(5)}`)\n\n    // load/create cache for plugin\n    const pluginCache = cache.plugin(plugin)\n\n    // create a new context for this plugin\n    this.pluginCtx[plugin] = {\n      args,\n      cache: pluginCache,\n      log: logger.log,\n      debug: logger.debug,\n      error: logger.error\n    }\n  }\n\n  /**\n   * Starts the pipeline.\n   * @return {Promise} resolves when task is complete\n   */\n  async start (name, directory, recache = false, useDoubleCache = true) {\n    const { log, debug } = createLogger(`hopp:${name}`)\n\n    /**\n     * Figure out if bundling is needed & load plugins.\n     */\n    if (isUndefined(this.needsBundling) || isUndefined(this.needsRecaching) || (this.d.stack.length > 0 && !this.loadedPlugins)) {\n      this.loadedPlugins = true\n\n      this.d.stack.forEach(([plugin, args]) => {\n        if (!this.pluginCtx.hasOwnProperty(plugin)) {\n          this.loadPlugin(name, plugin, args)\n        }\n\n        this.needsBundling = !!(this.needsBundling || pluginConfig[plugin].bundle)\n        this.needsRecaching = !!(this.needsRecaching || pluginConfig[plugin].recache)\n      })\n    }\n\n    /**\n     * Override recaching.\n     */\n    if (this.needsRecaching) {\n      recache = true\n    }\n\n    /**\n     * Get the modified files.\n     */\n    debug('task recache = %s', recache)\n    let files = await glob(this.d.src, directory, useDoubleCache, recache)\n\n    if (files.length > 0) {\n      const dest = path.resolve(directory, getPath(this.d.dest))\n\n      /**\n       * Switch to bundling mode if need be.\n       */\n      if (this.needsBundling) {\n        return await this.startBundling(name, directory, files, dest, useDoubleCache)\n      }\n\n      /**\n       * Ensure dist directory exists.\n       */\n      await mkdirp(dest.replace(directory, ''), directory)\n\n      /**\n       * Create streams.\n       */\n      files = _(files).map(file => ({\n        file,\n        stream: [\n          createReadStream(file, dest + '/' + path.basename(file))\n        ]\n      }))\n\n      if (this.d.stack.length > 0) {\n        /**\n         * Create streams.\n         */\n        const stack = this.buildStack()\n\n        /**\n         * Connect plugin streams with pipelines.\n         */\n        files.map(file => {\n          file.stream = file.stream.concat(stack)\n          return file\n        })\n      }\n\n      /**\n       * Connect with destination.\n       */\n      files.map(file => {\n        // strip out the actual body and write it\n        file.stream.push(mapStream((data, next) => {\n          if (typeof data !== 'object' || !data.hasOwnProperty('body')) {\n            return next(new Error('A plugin has destroyed the stream by returning a non-object.'))\n          }\n\n          next(null, data.body)\n        }))\n        file.stream.push(fs.createWriteStream(dest + '/' + path.basename(file.file)))\n\n        // promisify the current pipeline\n        return new Promise((resolve, reject) => {\n          // connect all streams together to form pipeline\n          file.stream = pump(file.stream, err => {\n            if (err) reject(err)\n          })\n          file.stream.on('close', resolve)\n        })\n      })\n\n      // start & wait for all pipelines to end\n      const start = Date.now()\n      log('Starting task')\n      await Promise.all(files.val())\n      log('Task ended (took %s ms)', Date.now() - start)\n    } else {\n      log('Skipping task')\n    }\n  }\n\n  /**\n   * Converts task manager to JSON for storage.\n   * @return {Object} proper JSON object\n   */\n  toJSON () {\n    return {\n      dest: this.d.dest,\n      src: this.d.src,\n      stack: this.d.stack,\n      needsBundling: this.needsBundling,\n      needsRecaching: this.needsRecaching\n    }\n  }\n\n  /**\n   * Deserializes a JSON object into a manager.\n   * @param {Object} json\n   * @return {Hopp} task manager\n   */\n  fromJSON (json) {\n    this.d.dest = json.dest\n    this.d.src = json.src\n    this.d.stack = json.stack\n    this.needsBundling = json.needsBundling\n    this.needsRecaching = json.needsRecaching\n\n    return this\n  }\n}\n"]}