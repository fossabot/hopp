{"version":3,"sources":["../../src/tasks/goal.js"],"names":["taskDefns","bustedTasks","fromArray","arr","defineTasks","defns","busted","create","tasks","projectDir","mode","goal","length","name","Array","error","stack","Promise","all","map","task"],"mappings":";;;;;;;AAMA;;;;AACA;;;;AACA;;;;;;2cARA;;;;;;AAUA,IAAIA,kBAAJ;AACA,IAAIC,oBAAJ;;AAEA,SAASC,SAAT,CAAoBC,GAApB,EAAyB;AACvB,MAAIA,IAAI,CAAJ,MAAW,UAAf,EAA2B;AACzB,WAAO,wBAAeA,IAAI,CAAJ,CAAf,CAAP;AACD;;AAED,SAAO,qBAAYA,IAAI,CAAJ,CAAZ,CAAP;AACD;;AAEM,IAAMC,oCAAc,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC5CN,cAAYK,KAAZ;AACAJ,gBAAcK,MAAd;;AAEA,qBAAeF,WAAf,CAA2BC,KAA3B,EAAkCC,MAAlC;AACD,CALM;;AAOA,IAAMC,0BAAS,SAATA,MAAS,CAACC,KAAD,EAAQC,UAAR,EAAuC;AAAA,MAAnBC,IAAmB,uEAAZ,OAAY;;AAC3D,MAAIC,aAAJ;;AAEA,MAAIH,MAAMI,MAAN,KAAiB,CAArB,EAAwB;AACtB,QAAIC,OAAOL,MAAM,CAAN,CAAX;AACAG,WAAOX,UAAUQ,MAAM,CAAN,CAAV,CAAP;;AAEA,QAAIG,gBAAgBG,KAApB,EAA2B;AACzBH,aAAOT,UAAUS,IAAV,CAAP;AACD;;AAEDA,WAAO,0CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEEA,KAAKD,IAAL,EAAWG,IAAX,EAAiBJ,UAAjB,EAA6B,CAAC,CAACR,YAAYY,IAAZ,CAA/B,CAFF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAIJ,2CAAqBA,IAArB,EAA6BE,KAA7B,CAAmC,eAAO,YAAIC,KAAX,GAAmB,YAAIA,KAAvB,cAAnC;AAJI,oBAKG,eALH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,IAAP;AAQD,GAhBD,MAgBO;AACLL,WAAOM,QAAQC,GAAR,CAAYV,MAAMW,GAAN;AAAA,4DAAU,kBAAMN,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBO,oBADuB,GAChBpB,UAAUa,IAAV,CADgB;;;AAG3B,oBAAIO,gBAAgBN,KAApB,EAA2B;AACzBM,yBAAOlB,UAAUkB,IAAV,CAAP;AACD;;AAL0B;AAAA;AAAA,uBAQnBA,KAAKV,IAAL,EAAWG,IAAX,EAAiBJ,UAAjB,EAA6B,CAAC,CAACR,YAAYY,IAAZ,CAA/B,CARmB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAUzB,6CAAqBA,IAArB,EAA6BE,KAA7B,CAAmC,aAAIC,KAAJ,gBAAnC;AAVyB,sBAWlB,eAXkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAV;;AAAA;AAAA;AAAA;AAAA,QAAZ,CAAP;AAcD;;AAED,SAAOL,IAAP;AACD,CArCM","file":"goal.js","sourcesContent":["/**\n * @file src/tasks/mgr.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport createWatch from './watch'\nimport createLogger from '../utils/log'\nimport createParallel from './parallel'\n\nlet taskDefns\nlet bustedTasks\n\nfunction fromArray (arr) {\n  if (arr[0] === 'parallel') {\n    return createParallel(arr[1])\n  }\n\n  return createWatch(arr[1])\n}\n\nexport const defineTasks = (defns, busted) => {\n  taskDefns = defns\n  bustedTasks = busted\n\n  createParallel.defineTasks(defns, busted)\n}\n\nexport const create = (tasks, projectDir, mode = 'start') => {\n  let goal\n\n  if (tasks.length === 1) {\n    let name = tasks[0]\n    goal = taskDefns[tasks[0]]\n\n    if (goal instanceof Array) {\n      goal = fromArray(goal)\n    }\n\n    goal = (async () => {\n      try {\n        await goal[mode](name, projectDir, !!bustedTasks[name])\n      } catch (err) {\n        createLogger(`hopp:${name}`).error(err && err.stack ? err.stack : err)\n        throw ('Build failed.')\n      }\n    })()\n  } else {\n    goal = Promise.all(tasks.map(async name => {\n      let task = taskDefns[name]\n\n      if (task instanceof Array) {\n        task = fromArray(task)\n      }\n\n      try {\n        await task[mode](name, projectDir, !!bustedTasks[name])\n      } catch (err) {\n        createLogger(`hopp:${name}`).error(err.stack || err)\n        throw ('Build failed.')\n      }\n    }))\n  }\n\n  return goal\n}\n"]}