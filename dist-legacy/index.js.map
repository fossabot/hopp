{"version":3,"sources":["../src/index.js"],"names":["cache","Goal","hoppfile","log","debug","error","require","EventEmitter","defaultMaxListeners","projectDir","process","cwd","args","d","r","R","v","V","h","largestArg","argv","slice","alias","o","a","hasOwnProperty","length","env","RECACHE","recache","help","console","repeat","exit","version","tasks","_","Array","forEach","mod","HOPP_DEBUG","verbose","HARMONY_FLAG","harmony","directory","resolve","find","file","load","lock","hopp","_resolve","_resolveFilename","what","parent","id","filename","loaded","exports","fromCache","busted","taskDefns","addDependencies","task","fullList","concat","sub","call","defineTasks","create","save","catch","end","lastErr","stack","saveLog","then","err"],"mappings":";;;;AAMA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,K;;AACZ;;;;AACA;;;;AACA;;IAAYC,I;;AACZ;;IAAYC,Q;;AACZ;;;;;;;;2cAfA;;;;;;oBAiB8B,mBAAa,MAAb,C;IAAtBC,G,iBAAAA,G;IAAKC,K,iBAAAA,K;IAAOC,K,iBAAAA,K;;AAEpB;;;;;;AAIAC,QAAQ,QAAR,EAAkBC,YAAlB,CAA+BC,mBAA/B,GAAqD,EAArD;;AAEA;;;;;AAKA,IAAIC,aAAaC,QAAQC,GAAR,EAAjB;;AAEA;;;AAGA,IAAMC,OAAO;AACXC,KAAG,CAAC,WAAD,EAAc,+BAAd,CADQ;AAEXC,KAAG,CAAC,SAAD,EAAY,wCAAZ,CAFQ;AAGXC,KAAG,CAAC,SAAD,EAAY,qBAAZ,CAHQ;AAIXC,KAAG,CAAC,SAAD,EAAY,uBAAZ,CAJQ;AAKXC,KAAG,CAAC,SAAD,EAAY,kBAAZ,CALQ;AAMXC,KAAG,CAAC,MAAD,EAAS,sBAAT;;AAGL;AATa,CAAb,CAUA,IAAIC,aAAa,EAAjB;AACA,IAAMC,OAAOd,QAAQ,UAAR,EAAoBI,QAAQU,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAApB,EAA2C;AACtDC,SAAQ,YAAM;AACZ,QAAMC,IAAI,EAAV;;AAEA,SAAK,IAAIC,CAAT,IAAcZ,IAAd,EAAoB;AAClB,UAAIA,KAAKa,cAAL,CAAoBD,CAApB,CAAJ,EAA4B;AAC1BD,UAAEC,CAAF,IAAOZ,KAAKY,CAAL,EAAQ,CAAR,CAAP;;AAEA,YAAIZ,KAAKY,CAAL,EAAQ,CAAR,EAAWE,MAAX,GAAoBP,WAAWO,MAAnC,EAA2C;AACzCP,uBAAaP,KAAKY,CAAL,EAAQ,CAAR,CAAb;AACD;AACF;AACF;;AAED,WAAOD,CAAP;AACD,GAdM;AAD+C,CAA3C,CAAb;;AAkBA;AACAb,QAAQiB,GAAR,CAAYC,OAAZ,GAAsBR,KAAKS,OAA3B;;AAEA;;;AAGA,SAASC,IAAT,GAAgB;AACdC,UAAQ5B,GAAR,CAAY,+BAAZ;AACA4B,UAAQ5B,GAAR,CAAY,EAAZ;;AAEA,OAAK,IAAIqB,CAAT,IAAcZ,IAAd,EAAoB;AAClB,QAAIA,KAAKa,cAAL,CAAoBD,CAApB,CAAJ,EAA4B;AAC1BO,cAAQ5B,GAAR,CAAY,iBAAZ,EAA+BqB,CAA/B,EAAkCZ,KAAKY,CAAL,EAAQ,CAAR,CAAlC,EAA8C,IAAIQ,MAAJ,CAAWb,WAAWO,MAAX,GAAoBd,KAAKY,CAAL,EAAQ,CAAR,EAAWE,MAA/B,GAAwC,CAAnD,CAA9C,EAAqGd,KAAKY,CAAL,EAAQ,CAAR,CAArG;AACD;AACF;;AAEDd,UAAQuB,IAAR,CAAa,CAAb;AACD;;AAED,IAAIb,KAAKc,OAAT,EAAkB;AAChBH,UAAQ5B,GAAR,CAAYG,QAAQ,iBAAR,EAA2B4B,OAAvC;AACAxB,UAAQuB,IAAR,CAAa,CAAb;AACD;;AAED;;;;;;;;AAQA,IAAIb,KAAKU,IAAT,EAAe;AACbA;AACD;;AAED;;;AAGA,IAAMK,QAAQf,KAAKgB,CAAL,CAAOV,MAAP,KAAkB,CAAlB,GAAsB,CAAC,SAAD,CAAtB,GAAoCN,KAAKgB,CAAvD;;AAEA;;;AAGA,IAAIhB,KAAKd,OAAT,EAAkB;AAChB,GAAC,CAACc,KAAKd,OAAL,YAAwB+B,KAAxB,GAAgCjB,KAAKd,OAArC,GAA+C,CAACc,KAAKd,OAAN,CAAhD,EACEgC,OADF,CACU;AAAA,WAAOhC,QAAQiC,GAAR,CAAP;AAAA,GADV;AAEF;;AAED,CAAC,0CAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;;;AAGA7B,kBAAQiB,GAAR,CAAYa,UAAZ,GAAyB9B,QAAQiB,GAAR,CAAYa,UAAZ,IAA0B,CAAC,CAAEpB,KAAKqB,OAA3D;AACArC,gBAAM,yBAAN,EAAiCM,QAAQiB,GAAR,CAAYa,UAA7C;;AAEA;;;AAGA9B,kBAAQiB,GAAR,CAAYe,YAAZ,GAA2BhC,QAAQiB,GAAR,CAAYe,YAAZ,IAA4B,CAAC,CAAEtB,KAAKuB,OAA/D;;AAEA;;;;;AAZA,wBAgBc,qBAAa;AACzB;AACA,gBAAIC,UAAU,CAAV,MAAiB,GAArB,EAA0B;AACxB,qBAAOA,SAAP;AACD;;AAED;AACA,gBAAIA,UAAU,CAAV,MAAiB,GAArB,EAA0B;AACxBA,0BAAY,OAAOA,SAAnB;AACD;;AAED;AACA,mBAAO,eAAKC,OAAL,CAAanC,QAAQC,GAAR,EAAb,EAA4BiC,SAA5B,CAAP;AACD,WA7BD;;AAAA,wBA6BGxB,KAAKwB,SA7BR;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iBA6B2B1C,SAAS4C,IAAT,CAAcpC,QAAQC,GAAR,EAAd,CA7B3B;;AAAA;AAAA;;AAAA;AAAA;AAgBAF,oBAhBA;;;AA+BA;;;;;;;;AAQMsC,cAvCN,GAuCatC,aAAa,cAvC1B;;AAwCAL,gBAAM,wBAAN,EAAgC2C,IAAhC;;AAEA;;;AA1CA;AAAA,iBA6CmB/C,MAAMgD,IAAN,CAAWvC,UAAX,CA7CnB;;AAAA;AA6CMwC,cA7CN;AAAA;AAAA,iBAkDmB,oBAAWxC,UAAX,CAlDnB;;AAAA;AAkDMyC,cAlDN;;;AAoDA;;;;AAIMC,kBAxDN,GAwDiB,iBAAOC,gBAxDxB;;AAyDA,2BAAOA,gBAAP,GAA0B,UAACC,IAAD,EAAOC,MAAP,EAAkB;AAC1C,mBAAOD,SAAS,MAAT,GAAkBA,IAAlB,GAAyBF,SAASE,IAAT,EAAeC,MAAf,CAAhC;AACD,WAFD;;AAIAhD,kBAAQN,KAAR,CAAckD,IAAd,GAAqB;AACnBK,gBAAI,MADe;AAEnBC,sBAAU,MAFS;AAGnBC,oBAAQ,IAHW;AAInBC,qBAASR;;AAGX;;;AAPqB,WAArB,CA7DA;AAAA,iBAuE6ChD,SAAS8C,IAAT,CAAcD,IAAd,CAvE7C;;AAAA;AAAA;AAAA;AAuEOY,mBAvEP;AAuEkBC,gBAvElB;AAuE0BC,mBAvE1B;;;AAyEA;;;AAGA,cAAIF,SAAJ,EAAe;;AAKb;AACSG,4BANI,GAMb,SAASA,gBAAT,CAAyBC,IAAzB,EAA+B;AAC7B,kBAAIF,UAAUE,IAAV,aAA2B1B,KAA/B,EAAsC;AACpC2B,2BAAWA,SAASC,MAAT,CAAgBJ,UAAUE,IAAV,EAAgB,CAAhB,CAAhB,CAAX;AACAF,0BAAUE,IAAV,EAAgBzB,OAAhB,CAAwB;AAAA,yBAAOwB,iBAAgBI,GAAhB,CAAP;AAAA,iBAAxB;AACD;AACF,aAXY;;AAab;;;AAZA;AACA;AACIF,oBAHS,GAGE,GAAG3C,KAAH,CAAS8C,IAAT,CAAchC,KAAd,CAHF;AAcb6B,qBAAS1B,OAAT,CAAiB;AAAA,qBAAQwB,iBAAgBC,IAAhB,CAAR;AAAA,aAAjB;;AAEA;AACA,gCAASF,SAAT,EAAoBG,QAApB;AACD;;AAED;;;AAGA/D,eAAKmE,WAAL,CAAiBP,SAAjB,EAA4BD,MAA5B;AAnGA;AAAA,iBAoGM3D,KAAKoE,MAAL,CAAYlC,KAAZ,EAAmB1B,UAAnB,CApGN;;AAAA;AAAA;AAAA,iBAyGMT,MAAMsE,IAAN,CAAW7D,UAAX,CAzGN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,KA0GI8D,KA1GJ,CA0GU,eAAO;AAChB,WAASC,GAAT,CAAaC,OAAb,EAAsB;AACpBpE,UAAMoE,WAAWA,QAAQC,KAAnB,GAA2BD,QAAQC,KAAnC,GAA2CD,OAAjD;AACA/D,YAAQuB,IAAR,CAAa,CAAC,CAAd;AACD;;AAED,gBAAa0C,OAAb,CAAqBlE,UAArB,EACGmE,IADH,CACQ;AAAA,WAAMJ,IAAIK,GAAJ,CAAN;AAAA,GADR,EAEGN,KAFH,CAES;AAAA,WAAOC,IAAIK,GAAJ,CAAP;AAAA,GAFT;AAGD,CAnHA","file":"index.js","sourcesContent":["/**\n * @file index.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport util from 'util'\nimport Module from 'module'\nimport * as cache from './cache'\nimport createHopp from './hopp'\nimport fromTree from './tasks/tree'\nimport * as Goal from './tasks/goal'\nimport * as hoppfile from './hoppfile'\nimport createLogger from './utils/log'\n\nconst { log, debug, error } = createLogger('hopp')\n\n/**\n * Extend the number of default listeners because 10\n * gets hit pretty quickly with piping streams.\n */\nrequire('events').EventEmitter.defaultMaxListeners = 50\n\n/**\n * This is resolved to the directory with a hoppfile later\n * on but it is globally scoped in this module so that we can\n * save debug logs to it.\n */\nlet projectDir = process.cwd()\n\n/**\n * Parse args\n */\nconst args = {\n  d: ['directory', 'set path to project directory'],\n  r: ['require', 'require a module before doing anything'],\n  R: ['recache', 'force cache busting'],\n  v: ['verbose', 'enable debug messages'],\n  V: ['version', 'get version info'],\n  h: ['help', 'display this message']\n}\n\n// parse via minimist\nlet largestArg = ''\nconst argv = require('minimist')(process.argv.slice(2), {\n  alias: (() => {\n    const o = {}\n\n    for (let a in args) {\n      if (args.hasOwnProperty(a)) {\n        o[a] = args[a][0]\n\n        if (args[a][0].length > largestArg.length) {\n          largestArg = args[a][0]\n        }\n      }\n    }\n\n    return o\n  })()\n})\n\n// expose to env\nprocess.env.RECACHE = argv.recache\n\n/**\n * Print help.\n */\nfunction help() {\n  console.log('usage: hopp [OPTIONS] [TASKS]')\n  console.log('')\n  \n  for (let a in args) {\n    if (args.hasOwnProperty(a)) {\n      console.log('  -%s, --%s%s%s', a, args[a][0], ' '.repeat(largestArg.length - args[a][0].length + 2), args[a][1])\n    }\n  }\n\n  process.exit(1)\n}\n\nif (argv.version) {\n  console.log(require('../package.json').version)\n  process.exit(0)\n}\n\n/**\n * Currently the only way for help to be called.\n * Later, it should also happen on invalid args but we\n * don't have invalid arguments yet.\n * \n * Invalid arguments is a flag misuse - never a missing\n * task. That error should be more minimal and separate.\n */\nif (argv.help) {\n  help()\n}\n\n/**\n * Set tasks.\n */\nconst tasks = argv._.length === 0 ? ['default'] : argv._\n\n/**\n * Require whatever needs to be loaded.\n */\nif (argv.require) {\n  ;(argv.require instanceof Array ? argv.require : [argv.require])\n    .forEach(mod => require(mod))\n}\n\n;(async () => {\n  /**\n   * Pass verbosity through to the env.\n   */\n  process.env.HOPP_DEBUG = process.env.HOPP_DEBUG || !! argv.verbose\n  debug('Setting HOPP_DEBUG = %j', process.env.HOPP_DEBUG)\n\n  /**\n   * Harmony flag for transpiling hoppfiles.\n   */\n  process.env.HARMONY_FLAG = process.env.HARMONY_FLAG || !! argv.harmony\n\n  /**\n   * If project directory not specified, do lookup for the\n   * hoppfile.js\n   */\n  projectDir = (directory => {\n    // absolute paths don't need correcting\n    if (directory[0] === '/') {\n      return directory\n    }\n\n    // sort-of relatives should be made into relative\n    if (directory[0] !== '.') {\n      directory = './' + directory\n    }\n\n    // map to current directory\n    return path.resolve(process.cwd(), directory)\n  })(argv.directory || await hoppfile.find(process.cwd()))\n\n  /**\n   * Set hoppfile location relative to the project.\n   * \n   * This will cause errors later if the directory was supplied\n   * manually but contains no hoppfile. We don't want to do a magic\n   * lookup for the user because they overrode the magic with the\n   * manual flag.\n   */\n  const file = projectDir + '/hoppfile.js'\n  debug('Using hoppfile.js @ %s', file)\n\n  /**\n   * Load cache.\n   */\n  const lock = await cache.load(projectDir)\n\n  /**\n   * Create hopp instance creator.\n   */\n  const hopp = await createHopp(projectDir)\n\n  /**\n   * Cache the hopp handler to make `require()` work\n   * in the hoppfile.\n   */\n  const _resolve = Module._resolveFilename\n  Module._resolveFilename = (what, parent) => {\n    return what === 'hopp' ? what : _resolve(what, parent)\n  }\n\n  require.cache.hopp = {\n    id: 'hopp',\n    filename: 'hopp',\n    loaded: true,\n    exports: hopp\n  }\n\n  /**\n   * Load tasks from file.\n   */\n  const [fromCache, busted, taskDefns] = await hoppfile.load(file)\n\n  /**\n   * Parse from cache.\n   */\n  if (fromCache) {\n    // create copy of tasks, we don't want to modify\n    // the actual goal list\n    let fullList = [].slice.call(tasks)\n\n    // walk the full tree\n    function addDependencies(task) {\n      if (taskDefns[task] instanceof Array) {\n        fullList = fullList.concat(taskDefns[task][1])\n        taskDefns[task].forEach(sub => addDependencies(sub))\n      }\n    }\n\n    // start walking from top\n    fullList.forEach(task => addDependencies(task))\n\n    // parse all tasks and their dependencies\n    fromTree(taskDefns, fullList)\n  }\n\n  /**\n   * Wait for task completion.\n   */\n  Goal.defineTasks(taskDefns, busted)\n  await Goal.create(tasks, projectDir)\n\n  /**\n   * Store cache for later.\n   */\n  await cache.save(projectDir)\n})().catch(err => {\n  function end(lastErr) {\n    error(lastErr && lastErr.stack ? lastErr.stack : lastErr)\n    process.exit(-1)\n  }\n\n  createLogger.saveLog(projectDir)\n    .then(() => end(err))\n    .catch(err => end(err))\n})\n"]}